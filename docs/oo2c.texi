@node OO2C, Syntax of Text Tokens, Pragmas, Top
@chapter OO2C

@menu 
* OO2C Overview::               An introduction to the oo2c implementation.
* Installing oo2c::             How to install oo2c. 
* Invoking Programs::           Using compiler and tools.
* Initialization Files::        How to configure the compiler.
* Interfacing to C Code::       How to write interface and foreign modules. 
* Limitations of oo2c::         Implementation limits of oo2c.
* Large Arrays of Constants::   How oo2c deals with large arrays of
                                 constants.  
* Emacs Mode::                  How to install and use Emacs mode.  
@end menu 

@node OO2C Overview, Installing oo2c, OO2C, OO2C
@section What is @code{oo2c}?

@code{oo2c} is the first complete working compiler of the OOC project.
Instead of translating Oberon-2 modules to machine code, it generates code
for the most portable assembler in existence: ANSI-C.  The compiler was
initially intended as a prototype backend for OOC, which could then be used
to evaluate and debug the frontend and the optimization modules.  However,
it is now a full-fledged development system, and among other things, it is
being used to develop native code OOC backends.

The choice of a high-level language as intermediate code has one distinct
advantage: portability.  Given a working ANSI-C compiler, @code{oo2c} 
runs on most modern Unix workstations; porting it to other platforms is
possible with minimal effort.  With @code{oo2c}, programs can be developed
that run without modification on all major Unix brands.  Differences
between the systems are masked by the implementation of low-level modules,
which take system peculiarities into account.

The special pre-compiler nature of @code{oo2c} also has its disadvantages.
The user should be aware of these points:

@itemize @bullet
@item
@code{oo2c} depends on an existing ANSI-C compiler.  Without such a
compiler, @code{oo2c} cannot be used.  In particular, a K&R compiler is not
sufficient.  Additionally, the C compiler has to support long identifiers;
typical identifiers in the intermediate code are much longer than the
minimum requirements stated in the ANSI-C specification.  This should not
generally be a problem because most C compilers and linkers are packaged
with a C++ compiler, and C++ does not limit the length of identifiers.

@item
@code{oo2c} depends on a third party garbage collector.  Because it uses
Hans-J. Boehm's excellent conservative garbage collector, this is not
strictly a disadvantage.  But in environments where this garbage collector
does not work, both the compiler and programs build with it are somewhat
hampered (@pxref{Preparing for Installation}).

@item
Code generated by @code{oo2c} is only portable within limits.  While
@code{oo2c} emits true ANSI-C code and works with standard C types (structs,
arrays, and the like), it is doing all address calculations for structure
and array accesses itself.  There are no field or element selectors in the
code, just plain memory accesses.  Therefore, @code{oo2c} requires that all
basic types have the expected size, and that the C compiler arranges
structures and arrays in the expected way.  For this reason, there are
different versions of @code{oo2c} for 32 and 64 bit systems.

@item
Creating object files takes a comparatively long time in comparison to other
compilers.  Translating a module is a two step process: it is converted into
C code by @code{oo2c}, and then it is translated into an object file by the
C compiler.  The second step usually takes much longer than the first, and
therefore, the speed of the C compiler has great influence on the time it
takes to build an object file.  The impact of this is lessened by an
intelligent make facility that tries to minimize recompilations.

@item
Only a limited set of run-time checks is supported.  Every run-time check is
done by inserting appropriate test code into @code{oo2c}'s C output.  Doing
such elementary checks by means of a high level language like C has a large
impact on the executable program's size and execution time.  For this
reason, not all possible run-time checks are supported; @code{oo2c} does not
support detection of integer overflows, nor most kinds of real overflows.
@end itemize



@node Installing oo2c, Invoking Programs, OO2C Overview, OO2C
@section Installing @code{oo2c}
@cindex oo2c, installation
@cindex oo2c, configuration

@menu
* Preparing for Installation::  Optional add-on packages supported by oo2c.
* Basic Installation::          The usual way to install oo2c on a system.
* Compilers and Options::       Fine tuning the C compiler.
* Installation Names::          Selecting destination dir and program names.
* Installing with Run-Time Checks::  Adding debug code to library and compiler.
@end menu


@node Preparing for Installation, Basic Installation, Installing oo2c, Installing oo2c
@subsection Preparing for Installation

@code{oo2c} can use two add-on packages to expand its own capabilities:
Hans-J. Boehm's conservative garbage collector @code{gc} and GNU
@code{libtool}.  The garbage collector extends @code{oo2c}'s run-time system
with the ability to free unused heap objects.  With the help of
@code{libtool}, @code{oo2c} can create shared and static libraries from a
set of modules.

Although both packages are optional, their use is highly recommended.  If
either one of these packages is not available, @code{configure} will abort
with an error.  To install oo2c without them, each package must be
explicitly disabled by setting @samp{--disable-gc} or @samp{--disable-libs}.

@subheading Preparing the garbage collector
@cindex garbage collector
@cindex gc
@cindex oo2c, installing garbage collector

If @code{gc} is installed as a library on the system, @code{configure}
detects this and uses it automatically.

Otherwise, get the garbage collector sources from Boehm's server
@format
@url{http://reality.sgi.com/employees/boehm_mti/gc_source/}
@end format
@noindent
and unpack the tar file in @code{oo2c}'s top-level directory.

Check the files @file{README} and @file{Makefile} in the newly created
subdirectory @file{gc} in case the @code{gc} package needs some special
adjustments.  When installing @code{oo2c}, the garbage collector sources are
detected, and are compiled and installed automatically.  @emph{Please note}:
The garbage collector subdirectory is not affected by running @code{oo2c}'s
@code{configure} script; only the environment variable @code{CC} is
overridden when calling @code{make}.

To install @code{oo2c} without a garbage collector, the option
@samp{--disable-gc} must be passed to @code{configure}.  The drawback is, of
course, that programs cannot free memory that has been dynamically allocated
using @code{NEW}.  For short running programs, which request only a small
amount of memory, this is not a severe problem.  However, process size for
long running, memory intensive programs can grow without bound until memory
resources are exhausted.

During the installation process, a long running, memory intensive
program is started: @code{oo2c} is used to compile all of its own
sources in a single run.  The process size of such a bootstrap without
garbage collection can grow beyond 100MB.  The process might run out of
memory, or you might decide to kill it with @kbd{Ctrl-C} because the
system thrashes wildly.  In this case, simply start @code{make} again to
finish the job.  @code{oo2c} detects files that have already been
compiled successfully, and does not try to compile them again.  This
way, @code{oo2c} can be installed on any system without garbage
collection.


@subheading Installing GNU libtool
@cindex libtool
@cindex oo2c, installing libtool

@code{libtool} can be obtained from any GNU server, e.g.
@url{ftp://ftp.gnu.org/pub/gnu/}.  The package's home page is
@url{http://www.profitpress.com/libtool/}.

Unpack the tar file and follow the directions in the file @file{INSTALL}
to install @code{libtool} on your system.  @code{oo2c}'s installation
process detects @code{libtool}, and uses it to create a static and, if
possible, a shared library for the OOC standard modules.



@node Basic Installation, Compilers and Options, Preparing for Installation, Installing oo2c
@subsection Basic Installation Procedure

The basic way to build and install the @code{oo2c} package is as follows:

@enumerate
@item
@kbd{cd} to the directory containing the package's source code and type
@kbd{./configure} to configure @code{oo2c} for your system.  If you're using
@file{csh} on an old version of System V, you might need to type @kbd{sh
./configure} instead to prevent @file{csh} from trying to execute
@code{configure} itself.

If you want to install oo2c without garbage collector support, run
@code{configure} using the option @samp{--disable-gc}, and if @code{libtool}
is not available, use @samp{--disable-libs}.

Running @code{configure} takes awhile.  While running, it prints some
messages telling which features it is checking for.

@item
Type @kbd{make} to compile the package.

@item
Type @kbd{make install} to install the programs and any data files and
documentation.  @kbd{make install-strip} additionally removes any debug
information from the installed executable programs.

@item
You can remove the program binaries and object files from the source code
directory by typing @kbd{make clean}.  To also remove the files that
@code{configure} created, type @kbd{make distclean}.
@end enumerate

If all went well, you should now have a working Oberon-2 compiler.  Since
ancient times, this joyous event is celebrated by writing a little program
saying "Hello World!".  Tradition is important, so here is a step-by-step
description of how to do it:

@enumerate
@item
Change to a directory of your choice, preferably an empty one.

@item
Create a file @file{Hello.Mod} with the following contents:
@smallexample
MODULE Hello;  
(* Author: Anonymous; program believed to be in the public domain *)
IMPORT Out;
BEGIN
  Out.String ("Hello World!"); Out.Ln
END Hello.
@end smallexample

@item
Type @kbd{oo2c -Mv Hello}.  The option @kbd{-M} tells @code{oo2c} to make an
executable program, and @kbd{-v} tells it to be more verbose with messages
while doing this.  Now, you should have quite a few files in the directory:
@file{Hello.Mod}, @file{Hello.Sym}, @file{Hello}, and some files ending in
@file{.c}, @file{.h}, @file{.d}, or @file{.o}.  See @ref{Initialization
Files} on how to automatically move these intermediate files into other
directories.

@item
Run the program by typing @kbd{./Hello}.  If you do not see the traditional
compiler birth cry of @samp{Hello World!} on your screen, something is
obviously wrong.
@end enumerate


@node Compilers and Options, Installation Names, Basic Installation, Installing oo2c
@subsection Specifying C Compiler and Options
@cindex oo2c, installation flags

Some systems require unusual options for compiling or linking that the
@code{configure} script cannot address.  You can give @code{configure}
initial values for variables by setting them in the environment.  Using a
Bourne-compatible shell, this can be done at the command line as follows:

@kbd{CC=c89 CFLAGS=-O2 LIBS=-lposix ./configure}

Or on systems that have the @code{env} program, 

@kbd{env LDFLAGS=-s ./configure}

If @code{gcc} is not available on your system, and @code{cc} is a K&R
compiler, try passing @kbd{CC=c89} to configure.  Some systems provide a
separate ANSI-C compliant compiler under this name.

The values of @samp{CC} (the C compiler), @samp{CFLAGS} (additional command
line options to the C compiler), and @samp{LDFLAGS} (additional linker
flags) determined by @code{configure} are used by @code{oo2c} as its default
settings.



@node Installation Names, Installing with Run-Time Checks, Compilers and Options, Installing oo2c
@subsection Setting Installation Paths and Program Names
@cindex oo2c, installation paths

By default, @kbd{make install} installs the package's files in the
directories @file{/usr/local/bin}, @file{/usr/local/man}, and so forth.  You
can specify an installation prefix, other than @file{/usr/local}, by giving
@code{configure} the option @samp{--prefix=PATH}.

You can specify separate installation prefixes for architecture specific
files and architecture independent files.  If you give @code{configure} the
option @samp{--exec-prefix=PATH}, the package uses @file{PATH} as the
prefix for installing programs and libraries.  If only @samp{--exec-prefix}
is set, documentation and other data files will still use the regular
prefix.

In addition, if you use an unusual directory layout, you can give options
such as @samp{--bindir=PATH} to specify different values for particular
kinds of files.  Run @kbd{configure --help} for a list of the directories
that can be set, and what kinds of files go in them.

Program names and the name of the installation directory can be changed upon
installation.  This is achieved by giving @code{configure} the option
@samp{--program-prefix=PREFIX} or @samp{--program-suffix=SUFFIX}.  For
example, after

@kbd{./configure --prefix=/usr --program-suffix=-@value{VERSION}}

@kbd{make install} would install the binaries as
@file{oo2c-@value{VERSION}}, @file{oob-@value{VERSION}}, and so on in
@file{/usr/bin}, and the rest of the compiler's files are put into
@file{/usr/lib/oo2c-@value{VERSION}}.


@node Installing with Run-Time Checks,  , Installation Names, Installing oo2c
@subsection Installing with Run-Time Checks
@cindex oo2c, installing with run-time checks

For performance reasons, run-time checks and assertions are disabled for all
library modules and binaries built during installation.

The drawback to this is that any error in the compiler will most likely show
itself as a core dump rather than the usual run-time error message.
Likewise, programs that pass invalid parameters to one of the library
modules might either crash, show strange results, or even, in some cases,
work as expected by sheer luck.  

As an example of invalid input giving "expected" results, consider an
unterminated character array (an @code{ARRAY OF CHAR} that is not terminated
by @code{0X}) passed as an input parameter to one of the procedures of
module @code{Strings}.  If run-time checks are enabled, the procedure 
stops with an error message when it tries to access an index past the end of
the array.  Without run-time checks, it simply continues to process
characters beyond the end of the array until it reaches a @code{0X}
somewhere in memory.  Under these circumstances, the procedure's result is
undefined.

To install @code{oo2c} with full run-time checks enabled, remove the whole
section @code{PRAGMAS @dots{} END} from @file{oo2crc.stage1.mk.in} in the
top-level directory @emph{before} running @code{configure}.  This builds
the library modules and executable programs with run-time checks and assertions
enabled.  Please note that this has no affect on foreign modules written in C,
like @file{Files}, @file{Exception}, @file{Types}, and so forth.

A simple way to ensure that a single program, say @samp{foo}, is created
with full run-time checks is to build it once with @kbd{oo2c --make --all
foo}.  This compiles all modules imported directly or indirectly by module
@samp{foo}, including the library modules it uses (@pxref{oo2c options}).
Afterwards, the newly created object files take precedence over the ones
built during installation, and will be linked into all programs.


@node Invoking Programs, Initialization Files, Installing oo2c, OO2C
@section Command Line Options for Compiler and Tools 
@cindex command line options

The following sections summarize the command line options accepted by the
programs of the @code{oo2c} package (@code{oo2c}, @code{oob}, @code{ooef},
and @code{oowhereis}).  Some options have two equivalent names: one is a
single letter preceded by @samp{-}, and the other is a long name preceded by
@samp{--}.  Multiple single letter options (unless they take an argument)
can be combined into a single command line word; for example, @samp{-MA} is
equivalent to @samp{-M -A}.  The special option @samp{--} denotes the end of
the option list.  That is, any argument after @samp{--} is not treated as an
option even if it begins with @samp{-}.

Each of these programs first evaluates the global initialization file, and
then parses the command line options from left to right.  In the default
installation, the global initialization file is
@file{/usr/local/lib/oo2c/oo2crc}.  This can be changed by setting the
environment variable @var{OOC_CONFIG} or using the option @samp{--config}.
How an environment variable is set depends on the shell:

@example
  bash: export OOC_CONFIG=my_config_file
  csh : setenv OOC_CONFIG my_config_file
@end example

The option @samp{--config <file>} supersedes both the hard coded file name
and the value in the environment variable @var{OOC_CONFIG}.  This option
takes effect @emph{before} the initialization file is read, which is
different from all other options.  There should be at most one
@samp{--config} statement.  However, by using the option
@samp{--include-config <file>}, it is possible to specify additional files
to be evaluated for configuration.  Specifying the empty string as
initialization file (e.g., with @samp{--config ""}) disables parsing of
all default files.

All programs use the same initialization file.  Most of the configuration
data pertains just to the compiler, but the @samp{PATHS} section is also
utilized by the other tools.  @samp{PATHS} defines a list of file patterns
and paths describing where the programs should look for files, and
destination directories for any files that are created.  For details on file
name resolution see @ref{Initialization Files}.  Except for the compiler,
all programs accept the option @samp{--help} (or @samp{-h} for short).


@menu
* oo2c options::                Oberon-2 to ANSI-C Translator
* oob options::                 Symbol File Browser
* oocn options::                Source Code Analysis and Transformation
* ooef options::                Conversion Tool for Error Messages
* oowhereis options::           File Finder
@end menu


@node oo2c options, oob options,  , Invoking Programs
@subsection Invoking the Compiler
@pindex oo2c
@cindex oo2c, command line options

The compiler @code{oo2c} performs a number of different functions depending
on the command line options it was invoked with.  


@menu
* oo2c primary operations::     Primary operations of the compiler.
* oo2c std options::            Selecting translation variants.
* oo2c C options::              Specifying the C compiler and its options.
* oo2c libraries::              Creating shared or static libraries.
* oo2c debugging options::      How to take a look at oo2c's internals.
* oo2c files::                  Input and output files of oo2c.
@end menu


@node oo2c primary operations, oo2c std options, oo2c options, oo2c options
@subsubsection Primary compiler operations
@cindex compiler operations

The primary functions of the compiler and the options that trigger them are
listed below.

@table @code
@item oo2c [options] <module>@dots{}
@cindex compilation
@c @item default action
Compile one or more modules.  That is, do syntactical and semantical checks
and translate the listed files from Oberon-2 source code to ANSI-C.
@item oo2c (--make|-M) [options] <module>
@cindex make
@c @item @samp{--make} or @samp{-M}
Make an executable program.  That is, create up to date versions of all the
necessary object files, which contribute to the given main module, and link
them into an executable program.
@item oo2c (--make-lib|--install-lib) [options] <module>
@c @item @samp{--make-lib} and @samp{--install-lib}
Turn a set of modules into a single static or shared library, and install the
new library in the applicable target directory.  Note that both the static and
shared library can be created at the same time, depending on the configuration
of @code{libtool}.  @xref{oo2c libraries}.
@item oo2c --makefile <file-name> [options] <module>
@cindex makefile
@c @item @samp{--makefile}
Write a @file{Makefile} that tells @code{make} how to perform the necessary
steps to create an executable program from a set of intermediate C files.
@end table

If none of the special flags listed above is present, @code{oo2c} assumes that
all arguments are names of source files and tries to compile them to ANSI-C
code.  Compiling a single module in this way can be used to check the syntax of
a module, or selectively force recompilation of modules.  If a file name
argument has no directory part, the compiler searches in the directories listed
in the @samp{PATHS} sections of the initialization files (@pxref{Managing
Files}).  Any errors encountered while parsing a source file are written to
@samp{stdout} like this:

@example
In file foo.Mod:
<pos>: <num> <error message>
@end example

@noindent
Here @var{<pos>} refers to the position of the error in the file (the first
character has position 0), @var{<num>} is the error number, and the rest is
a plain text error message.  The message format can be changed with the
filter program @code{ooef} (@pxref{ooef options}).

The option @samp{--make} (or @samp{-M} for short) turns a set of
Oberon-2 modules into an executable program.  The single argument can be
either the name of a module or a module's file name.  Again, the compiler
searches the directories in @samp{PATHS} if the file name has no directory
part.  The compiler inspects all modules imported directly or indirectly by
the given main module.  For every module that is compiled, the compiler
decides whether it needs to be translated to C or not.  A module is compiled
(or recompiled) if

@itemize @bullet
@item
there is no symbol file, or
@item
the interface of one of its imported modules has changed, or
@item
one of the intermediate C files is missing.
@end itemize

In the next step, all necessary object files are generated by invoking the C
compiler.  Typically, this is the most time consuming part of the
translation process.  The final step links object files and libraries into
an executable program with the same name as the main module.  Note that,
unlike the Oberon System, there is no notion of @emph{commands} (i.e.,
parameterless exported procedures, which can be activated directly by the
user).  Instead, the module body of the main module specifies the program's
execution sequence.

Sometimes, it is desirable to recompile all modules contributing to a
program because, for example, some intermediate files were corrupted or a
different set of options needs to be applied to all modules.  In this case,
the option @samp{--all} (or @samp{-A} for short) should be used together
with @samp{--make}.  This forces @code{oo2c} to recompile every module, from
scratch, that is part of the program and whose source code is available.
Another option modifying the behaviour of @samp{--make} is
@samp{--no-build}, which causes the make process to stop after the C code is
written, but before the C compiler is invoked to create the object files.

With @samp{--makefile <file-name>}, a so-called @file{Makefile} is written
to the specified file.  This option takes a single argument: the name of a
module or a file name.  The generated file contains the rules necessary to
use the @code{make} utility to build an executable program for the main
module from existing C code.  This feature is typically used to transfer a
program to a system on which @code{oo2c} is not installed.  By default, the
file contains only rules to compile C code into an executable program.
Specifying @samp{--oc-rules} also writes rules that will run @code{oo2c} and
produce, one at a time, the necessary C files from their Oberon-2 code.


@node oo2c std options, oo2c C options, oo2c primary operations, oo2c options
@subsubsection Standard Command Line Options
@cindex code optimization

The following command line options can be used with every mode of operation
for @code{oo2c}.  The variable names shown with some of the options refer to
the configuration variable associated with that option (@pxref{Options and
Pragmas}).

@table @asis
@item @samp{--optimize} or @samp{-O}, option variable: @samp{optimize}
Try harder to optimize the intermediate code.  In addition to the usual code
improving transformations, further time consuming optimizations are
enabled, and certain optimizations are run more than once.  Also, add the
contents of @samp{coptflags} to C compiler invocations.

@item @samp{--no-rtc}
Remove all run-time checks from the generated code.  This speeds up programs
considerably.  On the other hand, illegal program states might go by
unnoticed or lead to program termination in the form of a core dump.  For
the list of supported run-time checks, see @ref{Options and Pragmas}.
@comment Reference should be moved to chapter Pragmas once it exists...

@item @samp{--version}
Write program version and exit.

@item @samp{--write-config}
Write current configuration data to @samp{stdout} and exit.  Note that the
configuration data also includes the effects of command line options.

@item @samp{--verbose} or @samp{-v}, option variable: @samp{verbose}
Be more verbose during compilation.  In particular, the name of the file
currently compiled, changes in symbol files, and all external program
invocations are written to @samp{stdout}.

@item @samp{--warnings} or @samp{-w}, pragma variable: @samp{Warnings}
Include warnings in error listings.

@item @samp{--options <string>}
Add the given string to the initialization file section @samp{OPTIONS}.
Example: @samp{--options "optimize:=TRUE; verbose:=FALSE"}.  @xref{Options
and Pragmas}.

@item @samp{--pragmas <string>}
Add the given string to the initialization file section @samp{PRAGMAS}.
Example: @samp{--pragmas "Warnings:=TRUE; Assertions:=FALSE"}.
@xref{Options and Pragmas}.

@item @samp{--define <string>}
Define a new variable for the initialization file section @samp{PRAGMAS}.
This introduces a new variable and sets it to the given value.  Example:
@samp{--define "FooVar:=TRUE"}, which is equivalent to @samp{--pragmas
"DEFINE FooVar:=TRUE"}.
@end table


@node oo2c C options, oo2c libraries, oo2c std options, oo2c options
@subsubsection C Compiler Options
@cindex oo2c, C compiler invocation

@code{oo2c} needs a C compiler to translate its ANSI-C code to object files,
and to link object files and libraries into an executable program.  The
following options specify the name of the C compiler and the options that
are passed to it.  Every command line option modifies the value of a
variable of the initialization section @samp{OPTIONS}.  For example, writing
@samp{--cc gcc} in the command line is equivalent to adding the assignment
@samp{cc := "gcc"} to the @samp{OPTIONS} section.  The default values for
the various variables are set by @code{configure} when installing the
compiler.  With the exception of @samp{gcflags} and @samp{valueStack}, the
variables listed here have no effect as long as @code{oo2c} is only called
to translate single modules.  They are the building blocks for the argument
list passed to the C compiler when generating an object file, linking a
program or a library, or writing a makefile.

@table @asis
@item @samp{--cc <string>}, option variable: @samp{cc}
The name of the C compiler.

@item @samp{--cflags <string>}, option variable: @samp{cflags}
These flags are added to the C compiler's argument list when translating a C
file into an object file.

@item @samp{--coptflags <string>}, option variable: @samp{coptflags}
Like @samp{--cflags} these flags are added to the argument list, but
only if the option @samp{--optimize} is set.  This lets the user request
activation of time consuming optimization flags of the C compiler only
when such optimizations are desired.

@item @samp{--ldflags <string>}, option variable: @samp{ldflags}
The value of this string is appended to the link command.

@item @samp{--gcflags <string>}, option variable: @samp{gcflags}
This specifies the linker command that adds the garbage collector code to
the executable program.  Garbage collection is disabled by setting the
variable to the empty string.  This variable affects both C code generation
and linkage.

@item option variable: @samp{valueStack} (integer)
@code{oo2c} supports two mechanisms to allocate space for a procedure's
value parameters of open array type.  The first works with a fixed block of
heap memory as auxiliary stack, and the second uses the function
@code{alloca()} to reserve the necessary space on the normal stack.  The
advantages of @code{alloca()} are efficiency, elegance, and, in practice,
unlimited stack space.  The disadvantage is that it is not an ANSI-C
function, but rather a BSD extension, which is not available on some
systems.  The @code{alloca()} variant is chosen by setting @samp{valueStack}
to @samp{-1}.

Specifying a positive integer value for @samp{valueStack} tells @code{oo2c}
to allocate a block of heap memory of the given size to store open array
value parameters.  The size is then hard coded into the program and is fixed
throughout program execution; this size must be chosen carefully in order to
avoid stack overflows.  If the C compiler doesn't support @code{alloca()},
the default value of @samp{valueStack} is 64KB.  All modules contributing to
a program should be compiled using one of these two mechanisms: either for
@code{alloca()} or for the auxiliary stack.  It is not recommended that they
be mixed within the same program. 
@end table



@node oo2c libraries, oo2c debugging options, oo2c C options, oo2c options
@subsubsection Creating Shared or Static Libraries
@pindex oolibtool
@cindex library
@cindex shared library
@cindex static library
@cindex oo2c, installing libraries

A @dfn{library file} (or simply @emph{library}) is a type of file archive,
which contains a group of object files.  Library files may be either
@emph{static} or @emph{shared}.

@code{oo2c} depends on @code{GNU libtool} for the creation and
installation of libraries.  This package is available for a wide variety
of systems, and it handles all system specific details of libraries.
Support for particular systems may vary, but in practice @code{libtool}
supports static libraries on all systems, and shared libraries on most
systems.  The @code{oo2c} package includes @code{libtool}.  If necessary,
it is automatically installed, under the name @code{oolibtool}.  If a
version of @code{libtool} already exists on the system, it is used
instead of @code{oolibtool} by default.

@dfn{Static libraries} are used by the link editor, which combines libraries
with other object files to create a single executable program.

On the other hand, @dfn{shared libraries} (also called @dfn{dynamic
libraries}) are not stored in the executable program file itself, but are
loaded into memory by the run-time loader just prior to execution of a
program.  Only one instance of a shared library needs to be loaded into
memory at any particular time, even when more than one program is using it.
This can be beneficial especially if several programs share a large number
of modules, as it can provide a substantial savings in both memory usage and
disk space.  But keep in mind that @code{libtool}, and therefore
@code{oo2c}, does not support shared libraries on all systems.

The @samp{--make-lib} function of @code{oo2c} turns a set of modules into a
library.  Just like @samp{--make}, it takes a single argument: the name of a
module or a file name.  The main module must look like this:

@example
MODULE FooLib [LIBRARY "foo" "1:2:3"; INTERFACE "C"];
IMPORT @dots{};
END FooLib.
@end example

@noindent
This creates a library @samp{foo} with version number @samp{1.2.3} from all
modules imported directly or indirectly by module @samp{FooLib}.  Modules
that are already a part of another library are not be included in
@samp{foo}.  Both a shared library and a static library are built, or, if
the system does not support shared libraries, just the static version.  For
information about the version number and how it has to be maintained, see
@ref{Versioning,,Library Interface Versions,libtool.info, Libtool Manual}.
To install a newly created library use @samp{--install-lib}.  This command
takes the same arguments as @samp{--make-lib}, and invokes
@code{libtool} to install the library in the target directory.

Subsequent import of any module that is part of the library causes
@code{oo2c} to link against the library file instead of the module's object
file.  Note that recompilation of such a module, either through an explicit
command or during a make, will undo this.  The compiled module and all
modules importing it will then be linked against the object files.

Linking against libraries that haven't yet been moved to their final
destination is slightly tricky.  Some systems encode the absolute path to
the shared library directly in the executable program, and @code{libtool}
has to do some special magic to produce a program that works both before
and after the libraries have been installed.

To link against uninstalled libraries, the option @samp{--libtool-link} must
be used.  This modifies the linker invocation to link against @code{libtool}
libraries from the current directory (for example @file{libfoo.la}), instead
of the library itself.  The resulting command string is then passed to
@code{libtool}.

If uninstalled shared libraries are involved, @code{libtool} places the
executable program in the directory @file{./.libs}, and a wrapper script of
the same name is placed in the current directory.  Until the libraries are
installed, only the wrapper script can be executed.  If only static
libraries are involved, the program is placed directly in the current
directory.  When installing the program, the user should take the file from
@file{./.libs} if it exists, and the one in the current directory otherwise.


Use of @code{libtool} and the installation path can be adjusted with these
options:

@table @asis
@item @samp{--lib-path <string>}, option variable: @samp{libpath}
Specify the directory where the libraries should be installed.  Note that
the same destination directory has to be used for both library creation
(with @samp{--make-lib}) and library installation (with
@samp{--install-lib}).  The reason is that some systems hard code the
path to a shared library into the library binary itself.  The default path
is the same @file{lib} directory used when installing the compiler.

@item @samp{--libtool-cmd <string>}, option variable: @samp{libtoolCmd}
Set the name of the @code{libtool} script, which is used with
@samp{--make-lib} and @samp{--install-lib}.  Note that the default value of
@samp{libtoolCmd} depends on how @code{libtool} was installed on the system:
If @code{libtool} was installed prior to the @code{oo2c} package, its path
is used for @samp{libtoolCmd}; otherwise, @samp{libtoolCmd} is set to
@code{oolibtool}.

@item @samp{--install-cmd <string>}, option variable: @samp{installCmd}
Set the command prefix to be used when installing files with
@samp{--install-lib}.  If the system offers an @code{install} command, the
default prefix is defined to be something like @samp{/usr/bin/install -c -m
644}.  Otherwise, @code{oo2c} uses a replacement script with similar
functionality.

@item @samp{--libtool-link}, option variable: @samp{libtoolLink}
When used with @samp{--make}, invoke @code{libtool} to do final linking.  This
option is provided for linking against libraries that have not yet been moved
to their final destination.
@end table


@node oo2c debugging options, oo2c files, oo2c libraries, oo2c options
@subsubsection Debugging Options
@cindex oo2c, debugging options

There are a number of ways to inspect the inner workings of the compiler
during the optimization steps and in the backend.  The following command
switches are specific to @code{oo2c}; it is unlikely that other
implementations of OOC will share even a subset of them.

@table @asis
@item @samp{--checks}, option variable: @samp{checks}
Do some consistency checks after every optimization.  This is used to
discover invalid code transformations that violate structural requirements
of the intermediate code.

@item @samp{--stupid}, option variable: @samp{stupidCodeGen}
Disable all code transformations.  Feed output of frontend directly to
backend. 

@item @samp{--translate proc|gproc|module|program}, option variable: @samp{translationBasis}
Specify how much source code is read before running optimizations and
generating code.  Setting a higher structural level of the translation basis
allows for more optimizations to be run.  @samp{proc} reads a single
procedure at a time, @samp{gproc} a single global procedure including all
its nested procedures, @samp{module} a whole module, and @samp{program} the
entire set of program code.  @samp{gproc} is the default setting for
@code{oo2c}, @samp{proc} and @samp{program} are not supported yet, and (at
the moment) @samp{module} has no noticeable benefits compared to
@samp{gproc}.

@item @samp{--opt <string>}, option variable: @samp{optimizers}
Set the sequence of code transformations.  Every character in the given
string represents a transformation.  (To get the entire list of available
choices use some illegal selection, like @samp{--opt .}.)  Without the
special value @samp{0}, a final dead code elimination is done before
the code is given to the backend.  The character @samp{?} writes the
intermediate code to @samp{stdout}.  For example, the command line arguments
@samp{--opt "?CD?"} write the code as emitted by the frontend, run
common subexpression elimination and dead code elimination, and write the
resulting code to @samp{stdout} again.

The following options modify the output format of the intermediate code:

@table @asis
@item @samp{--gsa-qnames}, option variable: @samp{writeQualNames}
Include qualified names in the output.
@item @samp{--gsa-opnd-pos}, option variable: @samp{writeOpndPos}
As much as possible, print source file positions of operands.  Note that
many operands do not correspond directly to file positions.
@item @samp{--gsa-instr-pos}, option variable: @samp{writeInstrPos}
Print source file positions of instructions.
@item @samp{--gsa-assign}, option variable: @samp{writeAssignHints}
Try to show how the intermediate code reflects assignments in the source
code.  This is only useful as long as no optimizations are enabled; that is,
together with @samp{--opt "?"}.  Note that setting this option might utterly
confuse the backend, and result in corrupted C code.
@item @samp{--gsa-gate-old}, option variable: @samp{writeGateOld}
Extend the output of @samp{gate} instructions to include their
@samp{oldValue} field.  Very useful when debugging certain parts of the
frontend; otherwise, it serves no purpose.
@end table

@item @samp{--cgsa}, option variable: @samp{writeGSAC}
Write intermediate code annotated by backend specific information to
@samp{stdout}.  This is done just before control flow of the intermediate
code is converted from guarded commands to the more conventional form of
explicit jumps and branches.  After this final transformation, the ANSI-C
files are written.

The output can be adjusted with the following options:

@table @asis
@item @samp{--cgsa-qnames}, option variable: @samp{writeLocC}
Include qualified names in the output.
@item @samp{--cgsa-loc}, option variable: @samp{writeQualNamesC}
Add location values (i.e., variable names) to statements.  This makes it
considerably easier to match fragments of intermediate code with emitted C
code.
@end table
@end table

Note that the above table is not exhaustive; other undocumented options may
exist that are of interest only to the compiler writers.



@node oo2c files,  , oo2c debugging options, oo2c options
@subsubsection Files used by the Compiler
@cindex oo2c, intermediate files
@cindex oo2c, input files
@cindex oo2c, output files
@cindex oo2c, system files

The location of global files depends on the installation.  The file names
below assume that the default setting @kbd{--prefix=/usr/local} was used.

@table @file
@item /usr/local/lib/oo2c/oo2crc
Default path to primary initialization file.
@item ~/.oo2crc
Default user level initialization file.  Included from the primary
initialization file.
@item .Mod
Source code of an Oberon-2 module.
@item .Sym
Symbol file describing the public interface of a compiled module.
@item .h
Header file describing the interface of a module on C level.
@item .c 
@item .d
Translated ANSI-C code of a module.  The file @file{.d} holds global
definitions, @file{.c} the C functions.
@item .o
Object file derived from @file{.d} and @file{.c} by the C compiler.
@item .Lib
Library description with information about inter-library dependencies.
@item /usr/local/lib/oo2c/Errors.short
List of error messages.
@item /usr/local/lib/oo2c/lib/__*.c
@itemx /usr/local/lib/oo2c/lib/__*.h
Auxiliary files with C definitions.  These need to reside in one of the
paths listed in the initialization files or compilation of C code will fail.
@end table



@node oob options, oocn options, oo2c options, Invoking Programs
@subsection Using the Symbol File Browser
@pindex oob
@cindex symbol file
@cindex browser

The symbol file browser @code{oob} displays the interface definition of a
module as seen by the compiler.  

@example
oob [-x|--extended] <module-name>
@end example

The program accepts a single argument: the name of a module or a file
name, which is stripped of its directory part and any suffix.  The
symbol file for the resulting module name is located using the
@samp{PATHS} section of the configuration data.  Once found, the
contents of the symbol file are written to @samp{stdout} in a format
resembling that of a module.

With option @samp{--extended} (or @samp{-x} for short), the output of
@code{oob} for extended records includes the names of the base types, the
inherited record fields, and the inherited type-bound procedures.  Every
definition of a type-bound procedure is listed, even if it is redefined on
subsequent extension levels.

The output differs from a true Oberon-2 module, in particular from the
original source code, in a number of ways:

@itemize @bullet
@item
The symbol file is composed of only the essential data needed by the
compiler to interface to the corresponding module.  Therefore, none of the
comments embedded in the original source are included in the output.
@item
The original order of declarations is not preserved.  The declarations are
instead grouped into blocks of constants, types, variables, and procedures.
Within the blocks, the declared objects are sorted alphabetically.
@item 
Constant expressions are reduced to their final value.  
@item
Any reference to a named type that is defined as an alias of another type is
replaced with the name of the base type.
@item
The names of a type declarations which are not exported explicitly by the
module, but appear in the definition of another exported definition, are
placed in brackets.
@item
The @code{IMPORT} statement lists just those imports of the original module
that appear as part of exported declarations.  Imported modules which do not
contribute the module's interface are omitted.
@item
Type-bound procedures appear as part of the record declaration of their
receiver type.
@item
Unless the option @samp{--extended} is given, a record definition lists
only those fields and type-bound procedures that are defined explicitly for
this record.  Inherited fields or type-bound procedures are not listed.
@item
For simplicity, the export mark @code{*} is omitted.  Read-only exports are
explicitly marked with @samp{-}.
@end itemize

Interface definitions can also be extracted from a module's source text; the
command @kbd{oocn -d <module>} extracts the public interface of a module
(@pxref{oocn options}).


@node oocn options, ooef options, oob options, Invoking Programs
@subsection Source Code Analysis and Transformation
@pindex oocn
@cindex source code analysis
@cindex source code transformation

The tool @code{oocn} operates on the source code of Oberon-2 modules to
produce various manipulations of the text.  These include the following:
rewriting the source text, converting it into different formats, creating
cross-reference information, and extracting the public interface of the
module.  It is invoked like this:

@example
oocn <mode> [options] <module>...
@end example

@noindent
The @samp{<mode>} argument determines the operation performed by
@code{oocn}; for example, @samp{--html} sets the mode to translate to HTML.
No more than one mode can be specified at at time.  If no mode is specified,
@code{oocn} produces usage information, which lists all modes and options.

The @samp{[options]} are used in addition to @samp{<mode>} to modify the
behaviour of @code{oocn}.

The @samp{<module>...} argument is a list of one or more modules, or file
names of modules.  If it is a file name, the directory part and extension
are discarded.  Modules are then located by means of the @samp{PATHS}
section of the compiler's initialization file.

Except for its use of initialization files, @code{oocn} shares no code with
the compiler proper.  In particular, @code{oocn} does very limited error
checking.  It reports only a small subset of the errors that are detected by
the compiler, and it accepts malformed Oberon-2 sources, as long as the
errors do not interfere with its own operation.


@subsubheading Modes

The following is a list of available modes:

@table @asis
@item @samp{--modules} or @samp{-M}
List the names of all modules that are directly or indirectly imported by
the given modules (and also list the given modules themselves).

The modules are written in an order defined by the @code{IMPORT} relation;
that is, module @samp{Bar} is written before module @samp{Foo} if @samp{Foo}
depends on @samp{Bar}.  For example, the invocation @kbd{oocn --module Foo}
lists the names of all modules that are used to build the program
@samp{Foo}, writing the name of the most basic module first, and @samp{Foo}
last.  With option @samp{--no-internal}, the pseudo module @samp{SYSTEM} is
omitted from the output.

@emph{Please note}: This function implicitly adds the option
@samp{--closure}.

@item @samp{-d}
Write the interface of the given modules to @samp{stdout}.  Here the term
@dfn{interface} means the module's source text stripped of all private
declarations and all procedure bodies.  Comments in the remaining text are
preserved.  This mode is an abbreviation of @samp{--def-txt -o -}.

@item @samp{--html} or @samp{-H}
Convert the given set of modules to HTML text.  For every module @samp{Foo},
a file @file{<output-dir>/Foo.html} is created.  The default output
directory is the current working directory.  The HTML text preserves the
format of the source text, but adds colours for keywords, comments, strings,
and procedure declarations.  Identifiers of exported declaration are set in
bold.  Hyper-links are inserted

@itemize @bullet
@item
from an import clause to the imported module,
@item
from a qualified identifier to the place of the corresponding
declaration,
@item
from a field selector in a designator to the declaration of the
field in the corresponding record type,
@item
from a call to a type-bound procedure to the (statically)
corresponding procedure declaration,
@item
to a type-bound procedure's super and base definition if the procedure
is a redefinition of an existing procedure, and
@item
from a procedure's forward declaration to its actual definition.
@end itemize

Note that links to all record fields and type-bound procedures can be
inserted only if @code{oocn} was called with the option @samp{--closure}.

@item @samp{--xref} or @samp{-X}
Create cross-reference information for the given set of modules.  This mode
creates a set of HTML files, just like @samp{--html}, and adds hyper-links
from every declaration into a companion file
@file{<output-dir>/Foo_xref.html}.  The cross-reference file lists all uses
of each declaration in the scope of the scanned modules.  For a redefining
type-bound procedure, it includes a link to the base definition, and for an
original type-bound procedure definition, it lists all redefinitions and
their uses.

@emph{Please note}: This function implicitly adds the option
@samp{--closure}.

@item @samp{--uses <decl>} or @samp{-U <decl>}
The mode @samp{--uses} acts as a command line interface to the
cross-reference data.  That is, it locates all references to the
specified object and writes them to @samp{stdout} in the format of
@code{oo2c}'s error messages.  The argument @samp{<decl>} is a string
describing a declared object; the string must be the name of a
predefined object, or a module name followed by a (possibly empty)
sequence of names, with the names separated by dots.  The selector
@samp{foo.bar} designates the object @samp{bar} in scope @samp{foo},
where @samp{foo} is either

@itemize @bullet
@item
a module name,
@item
a qualified procedure name,
@item
the name of a type-bound procedure,
@item
a record type,
@item
a variable of type record,
@item
a pointer whose base type is a record, or
@item
a variable of type pointer to record.
@end itemize

The command @samp{oocn --uses bar} lists all appearances of the named
object @samp{bar} in the scope of the set of modules specified on the
command line.  The uses of module names, predefined objects, and objects
from the pseudo module @samp{SYSTEM} can also be listed in this way.
Uses within inactive conditional compilation clauses are ignored.

@emph{Example:}

@smallexample
oocn --uses TextRider.Reader.SetEol.i TextRider
   @result{} 
       In file /usr/local/lib/oo2c/lib/TextRider.Mod:
       12345: declaration
       12551: use
       12597: use
       12693: use
       12706: use
@end smallexample

The above command looks for uses of object @samp{i}, which belongs to the
type-bound procedure @code{SetEol} of type @code{Reader} declared in module
@file{TextRider}, within module @file{TextRider} (and modules it imports).

If the designated object is a type-bound procedure, @samp{--uses} lists the
base definition of the procedure, all of its redefinitions, and all calls to
the type-bound procedure in the scope of the inspected modules.

@emph{Example:}

@smallexample
oocn --uses Files.Reader.Pos liboo2c
   @result{} 
       In file lib/Channel.Mod: 
       11906: base definition
       In file lib/BinaryRider.Mod: 
       2462: use
       In file lib/TextRider.Mod: 
       9240: use
       In file backend/ansi-c/lib/PosixFileDescr.Mod: 
       5963: redefinition
       In file backend/ansi-c/lib/ProgramArgs.Mod: 
       2487: redefinition
       4175: use
@end smallexample

@emph{Please note}: This function implicitly adds the option
@samp{--closure}.

@item @samp{--def-txt}, @samp{--def-html}, @samp{--def-xref}
Using the specified format, write the interface of the given modules to a
file in the current output directory.  The output format is either plain
text in file @file{Foo_def.txt}, HTML text in @file{Foo_def.html}, or
cross-referenced HTML text in @file{Foo_def.html} and
@file{Foo_def_xref.html}.  The output directory can be changed using option
@samp{-o <dir>}.

@item @samp{--def-texi}
Create draft version of the public interface of the modules in Texinfo
format.  The output file is named @file{Foo_def.texi}.  Unlike the other
@samp{--def-*} variants, the output has little resemblance to the original
input text, and it will probably need manual intervention to turn it into
something more readable.  The output file is formatted as follows:

@itemize @bullet
@item
Declarations are listed in four blocks: constants, types, variables, and
procedures.  Within the blocks the order of declarations is preserved.
Methods are grouped again by their receiver type.

@item
The lengths of an array are replaced with @samp{n0}, @samp{n1}, @dots{},
@samp{nm} for the different dimensions.

@item
The descriptions attached to the declared entities are taken from any
comment following the declaration in the source code.  Unless the source
core was written with this in mind, there is no guarantee that the right
comment is chosen.  In particular, for every declared name at most a
single comment is copied over into the Texinfo file.

@item
The comments are minimally changed before they are copied to the Texinfo
file: the comment delimiters are removed, all indentation is deleted,
and the characters @samp{@@}, @samp{@{}, and @samp{@}} are quoted.

@item
Nested record constructors are not handled.  The fields of any nested
constructor must be inserted manually.  

@item
Any system flags associated with procedure objects are discarded.
@end itemize

@item @samp{--filter} or @samp{-F}
Copy the Oberon-2 source code from the input module @file{Foo.Mod} to
the file @file{Foo.txt} in the output directory, possibly applying some
code transformation on the way.  All symbols are copied as is, without
any change to their textual representation.  This includes text in
comments, pragmas, and program code in inactive conditional compilation
clauses.  Outside these special symbols, horizontal tabulators are
converted to spaces, using a tabulator width of 8.  All trailing
whitespace is removed from lines, as are any empty lines at the end of
the module.

This mode is usually used in conjunction with one or more of the code
transformation options, like @samp{--strip-pragmas} or @samp{--mod2foreign}.
@end table


@subsubheading Options

Use the following options to modify the behaviour of each mode:

@table @asis
@item @samp{-o <dir>}
Set the output directory for all commands that write to files.  The name
@samp{-} specifies @samp{stdout}.

@item @samp{-v}
Select verbose mode.  This writes the names of input and output files to
@samp{stdout}.

@item @samp{--closure} or @samp{-C}
Operate on all modules that are imported, either directly or indirectly,
by the modules given on the command line.  For example, the command

@smallexample
oocn --html --closure Foo
@end smallexample

@noindent
will produce HTML files for all modules contributing to program
@samp{Foo}.

@emph{Please note}: For some modes, the option @samp{--closure} is enabled
by default.

@item @samp{--no-internal}
Omit all pseudo modules that are internal to the compiler from the output of
@samp{--modules}.  At the moment, this means that @samp{SYSTEM} does not
appear in the module list.

@item @samp{--line-num}
Prepend the line number from the original source file to every line of
output.  This option affects all commands that produce text or HTML directly
from the source code.

@item @samp{--colors <name>}
Select color set to use when writing HTML text.  Currently available
variants: @samp{hilit} (default) and @samp{font-lock}.

@item @samp{--strip-comments}
Remove all comments from the source text before processing it.  Comments
starting with @code{(**} are not discarded, use option
@samp{--strip-doc-strings} for this.
@c ...it is a bit premature to talk about doc strings here; after all,
@c ...we don't have any concept of "documentation strings" yet  --mva

@item @samp{--strip-doc-strings}
Remove all documentation strings, that is, comments starting with
@code{(**}, from the source text.

@item @samp{--strip-pragmas}
Remove all pragmas from the source text.  Any program text appearing in
inactive conditional compilation clauses is also discarded.  The evaluation
of the guards of conditional compilation clauses uses the current values of
the pragma variables.  Therefore, applying this filter reduces the source
file to the program text that is actually seen by the compiler when
translating the module, assuming that the same settings are used for the
pragma variables.

@item @samp{--strip-system-flags}
Remove all system flags from the source text.  For example, if a module uses
any of the flags that are enabled by @samp{OOC_EXTENSIONS}, applying this
filter reduces the module to standard Oberon-2 code.

@item @samp{--mod2foreign}
This code transformation is intended for advanced users, who want to
write @samp{FOREIGN} modules (@pxref{FOREIGN Modules}).  It turns any
Oberon-2 module into a @samp{FOREIGN} module, by removing all procedures
bodies and the module's initialization code, and by adding appropriate
default system flags to the module's header.

@item @samp{--foreign2mod}
This is the reverse operation to @samp{--mod2foreign}.  It adds empty
bodies to all procedures in the module, and replaces the module's system
flags with @samp{[OOC_EXTENSIONS]}.
@end table

@code{oocn} also understands the following additional command line options,
which function in the same way as they do for @code{oo2c}:

@table @asis
@item @samp{--config} 
@item @samp{--include-config}
@item @samp{--options}
@item @samp{--pragmas}
@end table



@node ooef options, oowhereis options, oocn options, Invoking Programs
@subsection Converting Error Messages
@pindex ooef
@cindex error filter
@cindex error message format

Error messages emitted by @code{oo2c} refer to a character position in the
source file.  The first character has index @samp{0}.  Take, for example,
this slightly faulty program:

@example
MODULE Hello;
IMPORT Out;
BEGIN
  Ou.String ("Hello World!") Out.Ln
END Hello.
@end example

@noindent
Compiling it with @code{oo2c} produces this output:

@example
In file ./Hello.Mod: 
34:197 Undeclared identifier
60:139 `;' expected
@end example
@noindent

File position @samp{34} refers to the first character of @samp{Ou}, and
@samp{60} to the character to the right of the closing parenthesis.  This
format is slightly awkward if there is no support from the editor to locate
the designated points in the source code.

Because of this awkward format, the filter program @code{ooef} can be used
to transform error messages into a more convenient form.  @code{ooef}
reads the output of @code{oo2c} from @samp{stdin}, and writes a modified
version to @samp{stdout}.  Error messages are rewritten, and the rest of the
input is echoed.  The filter should be invoked like this: 

@example
oo2c @dots{} | ooef [option]
@end example

The output format is selected with the following options:

@table @asis
@item @samp{--context} or @samp{-c}
Write an extract of the source text and insert additional lines to point to
the error position.  This is the default setting.  Lines are numbered
starting at @samp{1}.  

@emph{Example:}  

@example
~$ oo2c Hello.Mod | ooef
In file ./Hello.Mod:
MODULE Hello;
IMPORT Out;
BEGIN
  Ou.String ("Hello World!") Out.Ln
#-^
# 4: 197 Undeclared identifier
#---------------------------^
# 4: 139 `;' expected
END Hello.
@end example

@item @samp{--line} or @samp{-l}
Write errors as @samp{file:line:error}.  This will only give an
approximation of the exact error position.  The first line has the index
@samp{1}.  

@emph{Example:}  

@example
~$ oo2c Hello.Mod | ooef -l
./Hello.Mod:4:197 Undeclared identifier
./Hello.Mod:4:139 `;' expected
@end example

@item @samp{--linecol} or @samp{-L}
Write errors as @samp{file:line,column:error}.  The first line has the number
@samp{1}, likewise the first column.  

@emph{Example:}  

@example
~$ oo2c Hello.Mod | ooef -L
./Hello.Mod:4,3:197 Undeclared identifier
./Hello.Mod:4,29:139 `;' expected
@end example
@end table

To get the file position of a run-time error, pass the module name and the
error position to @code{ooef} as arguments:

@example
ooef [option] <module> <pos>
@end example

In this mode, @code{ooef} does not act as a filter.  It generates its output
based on the given command line arguments instead.  The module's source file
must be in the standard search path.

@emph{Example:} Suppose the run-time system reports an index out of range
error in module @samp{Strings} at file position 2531.  The command @kbd{ooef
Strings 2531} lists the corresponding lines of the file @file{Strings.Mod},
highlighting the instruction whose run-time check failed:

@smallexample
In file /usr/local/lib/oo2c/lib/Strings.Mod:
    i: INTEGER;
  BEGIN
    i := 0;
    WHILE (stringVal[i] # 0X) DO
#--------------------^
# 68: 
      INC (i)
    END;
    RETURN i
@end smallexample



@node oowhereis options,  , ooef options, Invoking Programs
@subsection Using the File Finder
@pindex oowhereis
@cindex file finder

@code{oowhereis} can be used to locate files given their name.  This is a
command line interface to the mechanism used by the compiler to find its
files.  Among other things, it is used by the Emacs mode to determine the
file names of modules listed in @code{IMPORT} statements.

The program expects a single argument, the name of a file.  If a matching
file is found in any of the directories listed in the initialization file,
the full path (including the directory part) is written to @samp{stdout}.
In this case, the exit code is @samp{0}.  Otherwise, nothing is written, and
the program returns with an exit code of @samp{1}.

For source files with an associated RCS master file, the name of the working
file is returned (unless no working file is checked out and the option
@samp{--rcs-master}, or @samp{-r}, is used).  By default, the name of the
working file is returned even if this file does not currently exist.



@node Initialization Files, Options and Pragmas, Invoking Programs, OO2C
@section Initialization Files
@cindex initialization file

@code{oo2c}'s configuration mechanism manages a number of things: options
that control the compiler's workings, pragma variables that are available
during compilation, and the redirection table that specifies the directories
used for file access.  This mechanism provides the means to create a
hierarchy of configuration settings: system wide, user based, and project
specific.  Initialization files give full access to the configuration
database, whereas command line options provide shortcuts for only some,
albeit often used, settings.

An initialization file is composed of sections; each section is introduced
by its keyword, followed by data in a section-dependent formant, and
terminated by the keyword @samp{END}.  The following sections are known to
the compiler: @samp{OPTIONS}, @samp{PRAGMAS}, @samp{PATHS}, @samp{NEWFILES},
and @samp{INCLUDE}.  An initialization file may contain an arbitrary number
of these sections as explained in the rest of this chapter.

Comments are permitted within an initialization file.  A comment starts with a
@samp{#} character and extends to the end of the line.

@menu
* Options and Pragmas::         Setting option and pragma variables.
* Managing Files::              Specifying paths for input and output files.
* Selecting Configuration::     Which initialization files are used?
* Initialization Example::      The default initialization file as an example.
@end menu


@node Options and Pragmas, Managing Files, Initialization Files, Initialization Files
@subsection Option and Pragma Variables
@cindex OPTIONS
@cindex option variable
@cindex PRAGMAS
@cindex pragma variable

Both the @samp{OPTIONS} and the @samp{PRAGMAS} sections define a set of (name,
value) pairs.  Names must follow the rules of Oberon-2 identifiers (i.e., a
character followed by a sequence of characters or digits), and the value has to
be a literal value of type boolean, integer, or string.  Valid values are as
follows: @samp{TRUE} and @samp{FALSE} for boolean literals, any valid
@code{LONGINT} value for integer literals (including negative numbers), and
strings are delimited by either @samp{"} or @samp{'} and cannot contain
characters below ASCII code @samp{20X}.

The EBNF syntax of these sections is defined as follows:

@example
options_section = "OPTIONS" option_list "END".
pragmas_section = "OPTIONS" option_list "END".
option_list     = [option] @{ ";" [option]@}.
option          = [ assignment | define ].
assignment      = name ":=" value.
define          = "DEFINE" assignment.
@end example

@noindent
For an example of how this looks in practice, see @ref{Initialization
Example}.

A new variable is defined by prefixing an assignment with the keyword
@samp{DEFINE}.  No variable of the same name may exist beforehand.  The
definition also assigns a type to the variable based on the value on the
right hand side of the assignment.  A variable can be defined only once, but
its value can be changed through subsequent assignments.

Any further assignments change the value of an existing variable; the new
value has to be of the same type as the old.  For example, once a variable
is defined to be of type integer, all subsequent assignments can assign only
other integer values to it.  Note that assignments are valid only for
existing variables; that is, it must be a predefined compiler variable or a
variable that was previously introduced by a variable definition.

Options and pragmas differ in two points: 

@enumerate
@item
Options are specific to @code{oo2c} (or rather, each implementation of OOC),
whereas the entire set of pragma variables is defined for all OOC compilers.

@item
Options cannot appear within embedded pragma statements in source code, but
pragma variables can be used in pragma statements inside Oberon-2 modules.
@end enumerate

@noindent
For the complete set of option variables see @ref{oo2c options}.
Variable names are listed, where applicable, beside the command line
option that can change it.  For the built-in pragma variables of the
compiler see @ref{Predefined Pragma Variables}.

Pragma variables can be set from the command line by using the switch
@samp{--pragmas <string>}.  For example, specifying 

@example 
--pragmas "IndexCheck:= FALSE; DerefCheck := FALSE"
@end example

@noindent
has the same effect as adding

@example 
PRAGMAS
  IndexCheck := FALSE; DerefCheck := FALSE
END
@end example

@noindent
to an initialization file.  The command line option @samp{--options
<string>} does the same for @samp{OPTIONS}.



@node Managing Files, Selecting Configuration, Options and Pragmas, Initialization Files
@subsection Paths of Input and Output Files
@cindex redirection table
@cindex file paths

Even though Oberon-2 has only a single name space for module names, it would
be inconvenient if the source code for all modules had to reside within a
single directory.  Also, considering the number of intermediate files
@code{oo2c} produces for a single module, the situation could be even worse.

@code{oo2c} provides a way to distribute source code over a number of
directories, and thus ``stash away'' intermediate files in a more suitable
place.  When looking for a particular file, @code{oo2c} searches the
directories defined in the @samp{PATHS} sections of the initialization files.
The @samp{PATHS} section lists a number of wildcard strings, which are used to
determine which directories should be scanned for matching file names.

The syntax of a @samp{PATHS} section is defined like this:

@example
paths_section  = "PATHS" @{source_pattern@} "END".
source_pattern = "GET" wildcard_list "FROM" path @{path@}.
wildcard_list  = wildcard @{[","] wildcard@}.
wildcard       = name | string.
path           = ( name | string ) [";"].
@end example

A wildcard may contain the special characters @samp{*} and @samp{?}.  A
@samp{*} matches an arbitrary number of characters (including none at all),
whereas @samp{?} matches exactly one character.  Writing @samp{[RCS]} after
a wildcard signals that a file matching the pattern might be under control
of the Revision Control System (RCS), and should be checked out if no
working file exists.

Any non-absolute path (i.e., all path strings not starting with a @samp{/} or a
@samp{~}) is interpreted relative to the directory the compiler, or tool, was
started from.  Whenever a program is invoked from a different directory, these
relative path names will then resolve differently.  If the intention is to
always use the exact same directories for all invocations, all paths in the
initialization file must be absolute.

When looking for a particular file, say @file{foo}, the list of patterns is
scanned from top to bottom.  For every match, the list of directories is tested
from left to right.  The first directory that contains a file with the
requested name is used.  If the file cannot be found in any of these
directories, the simple file name is used.  If RCS support is enabled for
@file{foo}, then the files @file{<dir>/RCS/foo,v} and @file{<dir>/foo,v} are
also searched for in these directories.

@emph{Example:}  

@example
PATHS 
GET *.Mod [RCS] FROM .; /usr/local/foo
GET *.c FROM obj; /usr/local/bar
END
@end example

This tells @code{oo2c}, when looking for files with the extension
@samp{Mod}, search the current directory (@samp{.}) and then the directory
@samp{/usr/local/foo}; for files with the extension @samp{c}, search in the
@samp{obj} subdirectory (under the current working directory), and then the
directory @samp{/usr/local/bar}.

For instance, when searching for the file @file{foo.c}, the matching pattern
is @samp{*.c}, and so files @file{obj/foo.c} and @file{/usr/local/bar/foo.c}
are tested, in that order, for existence.  The first match is taken; that
is, if @file{obj/foo.c} exists, then that is the file used.  If neither of
these files exist, the name @file{foo.c} is used as a last resort.  If this
file exists in the current working directory, it is used; otherwise an
appropriate error message is written.

As another example, when looking for @file{Foo.Mod}, and the file
@file{./RCS/Foo.Mod,v} exists, but not @file{./Foo.Mod}, then the RCS master
@file{./RCS/Foo.Mod,v} is checked out.  Then, the working file
@file{./Foo.Mod} is created, and subsequently used.

Note that, if a module name is passed as argument from the command line, the
standard suffix @file{.Mod} is appended, and the resulting file name is
searched for using the above mechanism.  Also, if a file name that contains
a directory part is used, no searching is done at all; the file name is used
exactly as specified.

When trying to decide where to place a generated file (e.g., one of the
numerous intermediate files with C code), @code{oo2c} uses a simplified version
of the mechanism described above.  It looks for the first matching wildcard,
and uses the first directory in that list; the newly created file is written to
this directory.  It does not matter if the file exists beforehand or not, or if
a file of the same name exists in any of the other listed directories.  To use
the above example again, any file ending in @file{.Mod} would be put into the
current working directory (a hypothetical case since the compiler never writes
a new module), and all files ending in @file{.c} are placed in the directory
@file{obj}.

For files that are only written and not subsequently read, it is possible to
specify a destination directory in a special section @samp{NEWFILES}.  Its
syntax is somewhat simpler than @samp{PATHS}.

@example
  new_files_section = "NEWFILES" @{dest_pattern@} "END".
  dest_pattern      = "PUT" wildcard_list "INTO" path.
@end example

When writing a new file, the paths in @samp{NEWFILES} take precedence over
the ones in @samp{PATHS}.  But when searching for files, @samp{NEWFILES} is
ignored.  Because most of the files @code{oo2c} is dealing with are either
input-only or are written out to be used again at a later stage, use of
@samp{NEWFILES} is effectively limited to provide directories for executable
programs.  If paths for executable programs are not set in either
@samp{NEWFILES} or @samp{PATHS}, they are placed in the current working
directory.

The following example shows how the installation scripts of @code{oo2c} 
place the listed executable files in the subdirectory @file{stage2}:

@emph{Example:}  

@example
NEWFILES
PUT oo2c, oob, oowhereis, ooef, LibSummary, UpdateX11 INTO stage2
END
@end example


@node Selecting Configuration, Initialization Example, Managing Files, Initialization Files
@subsection Selecting Initialization Files

By default, all programs use the initialization file that was created when
the compiler package was installed.  The initialization file lists all
options needed for the system's C compiler, holds various system specific
settings, and specifies paths to the library files installed along with the
compiler (@pxref{Initialization Example}).  The global initialization file
is shared by all users, unless a particular user provides his own primary
initialization file instead.  A user can do this by defining an environment
variable @var{OOC_CONFIG} or by using the command line option
@samp{--config} (@pxref{Invoking Programs}).

More control over the configuration data is allowed by the special
initialization file section @samp{INCLUDE}.  It is a simple, but efficient,
way to add personalized or project specific configuration details to the
global default settings.  The format of an @samp{INCLUDE} section is simply
@samp{INCLUDE <file> END}, which causes the entire contents of @samp{<file>}
to be processed as if those contents had appeared in place of the
@samp{INCLUDE} statement.

For example, the default initialization file contains the following
statement to include a user's personalized settings:

@example
INCLUDE ~/.oo2crc END
@end example

@noindent
The file @file{.oo2crc} from the user's home directory is then parsed just as
though it were part of the initialization file at the place of the
@samp{INCLUDE} statement.  If a user decides that he needs even more control,
he could add a line to @file{~/.oo2crc} like this:

@example
INCLUDE ./.oo2crc_local END
@end example

@noindent
Then, the contents of the file @file{.oo2crc_local}, located in the current
working directory, are also added to the configuration database.  Provided
that the user has a separate working directory for every project, this
mechanism allows specification of additional settings, beyond the global and
the personalized ones, for each project.  Supplementary initialization files
should be included after the @samp{OPTIONS} and @samp{PRAGMAS} sections, but
before @samp{PATHS}.  This way, the specialized files override all
option and pragma variables, and their own paths then take precedence over
the more global ones.

Option @samp{--include-config <file>} can be used to include initialization
files from the command line.

The compiler emits a warning if it cannot find the global initialization
file.  On the other hand, no message is produced when the compiler fails to
find a file listed in an @samp{INCLUDE} section.


@node Initialization Example, Interfacing to C Code, Selecting Configuration, Initialization Files
@subsection An Example Initialization File

The file below is a slightly modified version of the primary initialization
file of a vanilla installation after @samp{configure --prefix=/usr} on a
Linux system.

@smallexample
OPTIONS
  verbose := FALSE;
  errorMessages := "/usr/lib/oo2c/Errors.short";
  optimize := FALSE;

  cc := "gcc"; cflags := "-pipe"; coptflags := "-O2";
  ldflags := "-L/usr/lib"; gcflags := "/usr/lib/oo2c/gc.a";
  valueStack := -1;

  libtoolCmd := "oolibtool";
  installCmd := "/usr/bin/install -c -m 644  ";
  libpath := "/usr/lib";

  DEFINE LibX11Prefix := " -L/usr/X11R6/lib  -lSM -lICE";
  DEFINE LibX11Suffix := "";
END

PRAGMAS
  Warnings := FALSE; Assertions := TRUE; Initialize := FALSE;
  StackCheck := TRUE; ConformantMode := FALSE;

  CaseSelectCheck := TRUE; IndexCheck := TRUE;
  RangeCheck := TRUE; DerefCheck := TRUE;
  FunctResult := TRUE; TypeGuard := TRUE;
  OverflowCheck := FALSE; IntDivCheck := TRUE;
  RealOverflowCheck := TRUE; RealDivCheck := TRUE
END

INCLUDE ~/.oo2crc END

PATHS
GET *.Mod [RCS] FROM .;/usr/lib/oo2c/lib
GET *.Sym, *.Lib FROM .;/usr/lib/oo2c/sym
GET *.h, *.d, *.c FROM .;/usr/lib/oo2c/obj;/usr/lib/oo2c/lib
GET *.o FROM .;/usr/lib/oo2c/obj
END
@end smallexample

The paths for error messages and library files are set by @code{configure}
when installing the compiler package.  Likewise, @code{configure} also
specifies the options for the C compiler, system commands, and external
libraries.  In this example, one item was changed manually; @code{gcc}'s
optimization flags were moved from @samp{cflags} to @samp{coptflags}.  With
the exception of the @samp{PATHS} section, this initialization file reflects
the values hard coded into the compiler during installation.


@node Interfacing to C Code, Using Foreign Code, Initialization Example, OO2C
@section Interfacing to C Code

Unlike many of the other Oberon systems, OOC does not try to provide a
closed development environment or, as in some cases, an entire operating
system.  Instead, it provides a set of tools that can be used to write
portable software for a number of operating systems.  OOC is meant to
coexist with the target OS and its system libraries.  In the case of
@code{oo2c}, this means interfacing with the Unix operating system and its
libraries, which are mostly written in the C programming language.

@menu
* Using Foreign Code::          Considerations about using foreign code.
* System Flags::                Elements of non-standard interface modules.
* INTERFACE Modules::           Interfacing to existing C code.
* FOREIGN Modules::             Writing Oberon-2 modules in C.
@end menu


@node Using Foreign Code, System Flags, Interfacing to C Code, Interfacing to C Code
@subsection Using Foreign Code
@cindex foreign modules
@cindex external code

Access to foreign code (like object files, static or shared libraries,
modules, etc.) should be transparent to Oberon-2 modules.  Using foreign
types, reading and writing to foreign variables, and calling foreign
procedures should look exactly like normal Oberon-2 entities.  Therefore,
all foreign constructs have to be mapped to their Oberon-2 counterparts.
That is, each C type is mapped onto an Oberon-2 type, each C function onto
an Oberon-2 procedure, and so on.  This mapping is accomplished by using
special definition modules, which in turn can be imported and used just like
any other Oberon-2 module.

Problems can arise when a foreign construct does not map directly onto an
Oberon-2 construct.  For instance, one construct could carry more
information or attributes than the other.  An example of this is the
Oberon-2 pointer type, which is associated with a type tag (for records) or
a length (for open arrays).  In C, a pointer is simply an address.  So in
this case, the mapping must be extended to cover semantic attributes that
are not actually defined in the Oberon-2 language (but rather, these are
implementation details).  

So, the mapping mechanism must provide a way of modifying the semantics of
standard Oberon-2 constructs (because we do not want to modify our
definition of Oberon-2 to include, say, a C-like @code{struct} type).  For
instance, a C pointer type is mapped to an Oberon-2 pointer that is marked
as having no associated type tag or length information.

Note that this approach generally works only for languages whose list of
features is approximately a subset of those in Oberon-2.  For example,
complicated constructs like C++ classes cannot be adequately mapped to
standard Oberon-2.

@emph{Please note}: All foreign modules should be considered unsafe,
low-level, and system (or compiler) dependent.  Any module accessing such a
module could also inherit those dependencies, so care must be taken when
using any foreign module.


@node System Flags, Module Flags, Using Foreign Code, Interfacing to C Code
@subsection System Flags
@cindex system flags
@cindex interfacing with C code

To attach non-standard attributes to Oberon-2 constructs, so-called system
flags are introduced.  @dfn{System flags} are applied either to the
declaration of an object (like variable, procedure, parameter) or to a type
constructor (record, array, formal parameter list, etc.).  Syntactically, a
system flag is defined using a left bracket @samp{[}, followed by a
implementation-defined statement sequence (which may consist of list of
keywords, strings, separators, etc.), and is terminated by a right bracket
@samp{]}.  Placement of each system flag associates it with a specific
Oberon-2 construct.

@emph{Example:}  

@smallexample
MODULE Xutil [INTERFACE "C"];
MODULE Files [FOREIGN "C"; LINK FILE "Files.c" END];
MODULE liboo2c [LIBRARY "oo2c" "0:0:0"; INTERFACE "C"];
TYPE R = RECORD [UNION] @dots{} END;
VAR argc- ["_program_argc"]: C.int;
PROCEDURE Foo* (VAR status_in_out[NIL_COMPAT]: INTEGER): INTEGER;
@end smallexample

Three types of system flags are permitted: module, declaration, and type.

Declaration flags are written to the right of the name and the export mark.
Type flags are placed after the keyword starting the type constructor.
Procedure declarations are a special case; declaration flags are placed
before the procedure name, and type flags are written in front of its formal
parameter list.

@emph{Example:}  

@smallexample
PROCEDURE [decl flags@dots{}] Foo* [type flags@dots{}] (bar: T; @dots{});
@end smallexample

@noindent
Splitting the system flags in this way is done to allow a syntactical
distinction between properties of the object and properties of the object's
type.  For example, the linkage name of the procedure is an attribute of the
object, whereas the procedure's calling convention influences things like
assignment compatibility to procedure variables, and is therefore an
attribute of the procedure's type.

System flags are not permitted in standard Oberon-2 modules; they are
restricted exclusively to foreign modules.  For @code{oo2c}, this means they
can only be used in modules declared @samp{INTERFACE} or @samp{FOREIGN}.

@menu
* Module Flags::                
* Type Flags::                  
* Declaration Flags::           
@end menu



@node Module Flags, Type Flags, System Flags, System Flags
@subsubsection Module Flags

Module flags have the most complex syntax of the system flags.  The extended
module header is defined like this:

@smallexample
Module         = "MODULE" ident [ModuleFlags] ";" @dots{}
ModuleFlags    = 
  "[" ["LIBRARY" LibName Version ";"]
      [ "INTERFACE" | "FOREIGN"] CallingConvention @{"," ModuleFlag@}
      [ ";" "LINK" LinkSection @{";" LinkSection@} "END" ] "]".
CallingConvention = string.  
ModuleFlag     = "CODE_FILE" | "INIT_FCT" | "GCC_ATTRIB_STDCALL".
LinkSection    = File | Object | Library.
File           = "FILE" string [Options].
Object         = "OBJ" string.
Library        = "LIB" string [DependenceList] [Options].
Options        = "ADD_OPTION" ident ["," ident].
DependenceList = "(" string @{"," string@} ")".
LibName        = string.
Version        = string.
@end smallexample

@samp{INTERFACE} modules are used to access existing C code, and are not
required to follow the Oberon-2 typing and heap conventions
(@pxref{INTERFACE Modules}).  On the other hand, @samp{FOREIGN} modules
behave exactly like standard Oberon-2 modules, but are implemented in
another language (@pxref{FOREIGN Modules}).  Both of these describe external
modules; that is, modules containing declarations of various objects whose actual implementation is provided by means such as C code or a system
library.  @samp{LIBRARY} headers are used when creating new shared or static
libraries with @code{oo2c}, and are explained in @ref{oo2c libraries}.

The ``calling convention'' string specifies how procedures declared in this
module are to be activated by the compiler.  At the moment, the only calling
convention supported for all target operating systems is @code{"C"}.  If the
target operating system is @samp{Win32}, then the calling convention
@code{"Pascal"} is also available.  The default calling convention used is
@code{"C"} for all targets.

The implementation of a module can be taken from a number of sources: an
uncompiled C file, an object file, a library, or an arbitrary mix of these
input formats.  The @samp{LINK} directive specifies which files must be
included, and its options are as follows:

@table @samp
@item FILE "foo.c"
Use external C code from file @file{foo.c}.  @code{oo2c} calls the C
compiler for this file if either the object file @file{foo.o} is missing or
the source @file{foo.c} is more recent than @file{foo.o}.  Note that
@code{oo2c} cannot detect if a file included into @file{foo.c} has changed.
In this case, the user has to remove @file{foo.o} by hand to trigger a
recompilation of the source file.

If additional options must be passed to the C compiler to translate the
file @file{foo.c}, the necessary arguments can be added to the command
line with @samp{ADD_OPTION}.  The keyword @samp{ADD_OPTION} is followed
by one or two (comma separated) identifiers, which refer to @code{oo2c}
compiler @code{OPTIONS} variables of string type.  The values of the
variables (if they exist) are added to the argument list of the C
compiler invocation.

@item OBJ "foo.o"
Include object file @file{foo.o} when linking the program.  Note that this
directive cannot be used in modules that contribute to a library
created with @samp{--make-lib}.  In other words, only foreign code that is
available as source text can be included in @samp{--make-lib} libraries.

@item LIB "foo"
Link the program against library @file{foo}; that is, add the option
@samp{-lfoo} to the argument list when invoking the linker.  The user must
make sure that the library is in the linker's search path, either by setting
the appropriate environment variable, by adjusting the @samp{--ldflags}
option, or by using the @samp{ADD_OPTION} mechanism (see below).
The last method, @samp{ADD_OPTION}, is preferred.

All other libraries used directly by library @file{foo} must also be
included in the @code{LIB} option, and are listed in parentheses after
@file{foo}.  This determines the order of @samp{-l@dots{}} arguments for the
linker.  For example, a library @samp{B} uses definitions from another
library @samp{A}, and therefore, it must be declared as @samp{LIB "B"
("A")}.  That is, @samp{B} relies on @samp{A} and they are to be linked in
using @samp{-lB -lA}.

To adjust the linker's search path using @samp{ADD_OPTION}, the library name is
followed by the keyword @samp{ADD_OPTION} and one or two (comma separated)
identifiers, which refer to @code{oo2c} compiler @code{OPTIONS} variables of
string type.  The value of the first identifier is called the @dfn{prefix
string}, and the second is called the @dfn{suffix string}.  During compilation,
the prefix string is inserted before the linker argument for the library, and
if a suffix string is present, its value is inserted after the linker argument.

For example, if compiler options are defined as follows:

@example
DEFINE LibX11Prefix := " -L/usr/X11R6/lib -lSM -lICE";
DEFINE LibX11Suffix := "-lsocket -lnsl";
@end example

@noindent
Then, the following command may be used to link in the library @samp{X11}:

@example
LINK LIB "X11" ADD_OPTION LibX11Prefix, LibX11Suffix
@end example

@noindent
which translates to the linker flags 

@example
 -L/usr/X11R6/lib -lSM -lICE -lX11 -lsocket -lnsl
@end example

The prefix string is usually used to extend the linker's library search
path, whereas the suffix string is, in this particular case, filled by the
@code{configure} program with system specific options.
@end table

@emph{Please note}: The file names given after @samp{FILE} or @samp{OBJ} are
subject to the usual file search mechanism, unless a directory part is
included.

The following flags can be set for a module:
@table @samp
@item CODE_FILE
This flag indicates that a module should be translated into header and
code files.  For example, the file @file{Foo.Mod} would be translated
both into a header @file{Foo.h} and code files @file{Foo.c} and
@file{Foo.d}.  The module can contain Oberon-2 procedures with non-empty
bodies, which could then be used to provide Oberon-2 implementations of
C macros.  Without this option, only a header @file{Foo.h} with the C
interface to the declarations in the module is written by the compiler.

@item INIT_FCT
The @samp{INIT_FCT} flag signals that module @file{Foo.Mod} links in a
function @code{void Foo__init(void)}, which will be called during
program startup as part of the normal module initialization.
@end table


@node Type Flags, Declaration Flags, Module Flags, System Flags
@subsubsection Type Flags

The following flags can be applied to type definitions:

@table @samp
@item NOT_EXTENSIBLE
The record type cannot be used as base type of another record.

@item NO_DESCRIPTOR
The record or array type has no type descriptor.

@item UNION
Translates the record type into a C @code{union} instead of a @code{struct}.

@item NO_LENGTH_INFO
The open array type has no length information.  Such an array cannot have
another open array as its element type.

@item STATIC_POINTER
The pointer has no type tag.  If the pointer's base type is a record or an
open array with @samp{NO_DESCRIPTOR}, this flag is automatically set for the
pointer type.

@item DISABLE_NEW
The predefined procedure @code{NEW} cannot be applied to this pointer type.
To allocate storage for a pointer variable of this type, @code{SYSTEM.NEW}
or a suitable low-level function of the operating system must be used.  This
flag is automatically set if the pointer or the base type is marked with
@samp{NO_DESCRIPTOR}, @samp{NO_LENGTH_INFO}, or @samp{STATIC_POINTER}.

@item ALIGN1, ALIGN2, ALIGN4, ALIGN8
Determines the alignment of record fields.  By default, record fields of
scalar type are aligned at addresses that are a multiple of the type's size
in bytes@footnote{At the moment, this is even done if the target system uses
less alignment for some basic types.  This only leads to problems, e.g. on
ix86 systems, if the record declaration contains a field of type
@code{double} that must be aligned at 4 bytes.}.  Specifying @samp{ALIGNn}
forces the alignment to be at most @samp{n} bytes; that is, all fields that
would be aligned with more than @samp{n} bytes are instead aligned at
@samp{n} byte boundaries.  @samp{ALIGN1} effectively disables all padding
between record fields.

@item CSTRING
Setting this flag for a pointer type whose base type is a character array
enables C-style array assignment semantics for variables derived from this
type.  Assigning a character array or string constant to such a pointer
variable is legal, and assigns the @emph{address} (but not the
@emph{contents}) of the array or string to the variable.  With this feature,
external C functions with string parameters can be called without reverting
to the cumbersome @code{SYSTEM.VAL(P,SYSTEM.ADR(a))} construction.
@end table

Procedure types and procedure declarations inherit the calling convention
specified at the beginning of the module.  This can be overridden by
including a string as part of the system flags of the type, which indicates
the procedure's calling convention.

The special parameter @samp{...} is allowed as the last formal parameter of
any procedure declaration without a body part.  This parameter corresponds
to variable arguments parameters in C, as used, for example, by
@code{printf()}.

With the extended semantics of parameters, it is necessary to adjust the
rules for matching parameter lists: two corresponding parameters are
required to share the same system flags in order to match.

@code{oo2c} uses the default calling convention of the target operating
system for standard Oberon-2 procedures.  This means that any matching C
function can be assigned to an Oberon-2 procedure variable unless the
function's calling convention has been overidden.  The compiler will prevent
an assignment if the calling convention of the procedure variable differs
from that of the procedure.



@node Declaration Flags, INTERFACE Modules, Type Flags, System Flags
@subsubsection Declaration Flags

The following table lists non-standard properties that apply to declarations
in external modules:

@table @asis
@item Variable Declarations

@table @samp
@item NO_DESCRIPTOR
Applies to variables of record type.  A record with this property cannot
appear in type tests and type guards, and it cannot be passed to formal
parameters that need a type tag.

@item STATIC_POINTER
Applies to record pointers, and means that the pointer's dynamic type is
always equal to its static type.

@item NO_LENGTH_INFO
Applies to variables of open array type, and means that the predefined
function @code{LEN} cannot be called on this variable.  Also, the array
value cannot be passed to a formal open array parameter that expects to get
the length of any open dimensions.
@end table

@item Parameter Declarations

@table @samp
@item NO_TYPE_TAG
Applies to formal variable parameters of record type, and means that it is
not accompanied by a type tag.  Such a parameter cannot appear in a type
test or type guard, and it cannot be passed to a formal parameter that
expects to get a type tag.  This flag is implicitly set if the record type
is marked with @samp{NO_DESCRIPTOR}.

@item NO_LENGTH_TAG
Applies to open array parameters, and means that it cannot be passed as
first argument to @code{LEN} and cannot be passed to a formal open array
parameter that expects to get the length of any open dimensions.

If such a parameter is used in a normal Oberon-2 procedure, the compiler
cannot create a local copy of the array argument.  This means that it cannot
guarantee the normal semantics of value parameters.  (Recall that value
parameters normally follow these rules: local modifications to the parameter
stay local, and modifications to the variable that was passed to the
parameter are not reflected in the parameter's local value.)

In this case, instead of the standard behaviour, the compiler treats the
parameter like a read-only variable and prevents @emph{local changes} to the
parameter's value.  However, any changes to the original @emph{array
variable}, which was passed to the parameter in the first place, are
reflected by the parameter's value.  This resembles the semantics of the
keyword @code{const} when applied to C pointer types.

If the array type is marked with @samp{NO_LENGTH_INFO}, this flag is
implicitly set.

@item NIL_COMPAT
Can be applied to any formal parameter passed by reference, and means that
the value @code{NIL} can be passed to it.
@end table

@item Linkage Names
Linkage names can be specified by a string literal, which is included in the
list of system flags of a variable or procedure declaration.  This sets the
declaration's C level name.  This means that the specified string is used in
the emitted C code instead of the name generated by @code{oo2c} (usually
module name plus two underscores plus declaration name).

@item Oberon-2 Procedures
Normally, a procedure declaration in an external module is taken to be a
declaration of an externally linked procedure definition.  That is, such
procedure declarations usually have no body.  By writing @samp{CODE_FILE}
into the module header, it is possible to define standard Oberon-2
procedures, which have a non-empty body part in the module.  Such procedures
have to be marked with @samp{HAS_BODY}.

@item Special Code Procedures
A procedure's list of system flags may contain the directive
@samp{PROC_ID=n}, where @samp{n} is a positive integer constant.  This
signals the compiler to insert code pattern @samp{n} for every call to this
procedure.  This is used to implement direct calls of math functions built
into the processor, or procedures that cannot be implemented in the usual
way (like the @code{oo2c} implementation of @code{Exceptions.PUSHCONTEXT}).
This flag is of use only when the backend is extended to emit code for the
new pseudo procedure.
@end table



@node INTERFACE Modules, FOREIGN Modules, Declaration Flags, Interfacing to C Code
@subsection INTERFACE Modules
@cindex INTERFACE module

An @dfn{interface module} describes the Oberon-2 interface to a piece of
existing software.  In the case of @code{oo2c}, this can be a file with C
code, an object file, or a library.  The existing code is not required to
follow the Oberon-2 typing and heap conventions.  Therefore, one must assume
that the semantics of types, variables, and procedures in such a module are
different from their Oberon-2 counterparts.

Names declared in an interface module, with the exception of the module name
itself, can contain underscores @samp{_} in place of a character.  The
default linkage names of variables and procedures are the same as their
Oberon-2 names, but without a module prefix.  All other names appearing in
the module's C header file get a prefix built from the module name
followed by two underscores.

None of the record types defined in the module have a type descriptor,
and they cannot be extended.  Likewise, array types have no type descriptor
and open arrays carry no length information.  Pointer types have no type tag
or length information, meaning that type tests, type guards, and @code{LEN}
cannot be applied to them.  Parameters are passed without any implicit
arguments containing a type tag or length information.

The special parameter @samp{...} is permitted as last argument in the formal
parameter list of the declaration of a procedure or a procedure type.  Note
that, in this case, the parameter list has to include at least one normal
parameter.

The following examples are taken from the Oberon-2 module @file{X11.Mod},
which defines the interface to the X11 library.  The module header looks
like this:

@smallexample
MODULE X11 [INTERFACE "C"; 
            LINK LIB "X11" ADD_OPTION LibX11Prefix, LibX11Suffix END];
@end smallexample

The first example highlights the basic translation process from a C header
file to an Oberon-2 module, but be aware that the translation patterns shown
are far from exhaustive.  The Oberon-2 counterparts to the base C types in
the header are taken from the standard module @file{C.Mod}, which also
provides two often used character array types.

@smallexample
From C.Mod:
char* @result{} TYPE charPtr1d* = POINTER TO ARRAY OF char;
char** @result{} TYPE charPtr2d* = POINTER TO ARRAY OF charPtr1d;

typedef unsigned long XID;
@result{} TYPE XID* = C.longint;

#define None 0L
@result{} CONST None* = 0;

#define NoEventMask  0L
#define KeyPressMask (1L<<0)  
@result{} CONST NoEventMask* = @{@};
@result{} CONST KeyPressMask* = @{0@};

#define Bool int
@result{} TYPE Bool* = C.int;

typedef struct @{
        int depth;       /* this depth (Z) of the depth */
        int nvisuals;    /* number of Visual types at this depth */
        Visual *visuals; /* list of visuals possible at this depth */
@} Depth;
@result{} TYPE
  DepthPtr* = POINTER TO Depth;
  Depth* = RECORD
    depth*: C.int;       (* this depth (Z) of the depth *)
    nvisuals*: C.int;    (* number of Visual types at this depth *)
    visuals*: VisualPtr; (* list of visuals possible at this depth *)
  END;
  
extern XFontStruct *XLoadQueryFont(
    Display* display, _Xconst char* name);
@result{} PROCEDURE XLoadQueryFont* (
    display: DisplayPtr; name: ARRAY OF C.char): XFontStructPtr;

extern char *XFetchBytes(
    Display* display, int* nbytes_return);
@result{} PROCEDURE XFetchBytes* (
    display: DisplayPtr; VAR nbytes_return: C.int): C.charPtr1d;

extern Status XGetAtomNames(
    Display* dpy, Atom* atoms, int count, char** names_return);
@result{} PROCEDURE XGetAtomNames* (
    dpy: DisplayPtr; VAR atoms: ARRAY OF Atom;
    count: C.int; VAR names_return: C.charPtr2d): Status;
@end smallexample

Most of this kind of interface conversion is fairly straightforward.  The
most challenging aspect is the handling of pointer types in parameter lists.
A C pointer argument can be translated into a number of things: an Oberon-2
pointer type, a variable parameter of the pointer's base type, an open array
parameter, or an array pointer.  The decision is made depending on the use
of the argument in question.  We can only give rough guidelines here.

Take, for example, the C function definition

@smallexample
void f(int *a) @{@dots{}@};
@end smallexample

@noindent
The formal parameter @samp{a} could be either an IN/OUT or an OUT argument,
which translates to

@smallexample
PROCEDURE f* (VAR a: C.int) @dots{}                      (1)
@end smallexample

@noindent
Or, it could be an array parameter, or an array pointer.  In that case, it
translates to one of the following alternatives:

@smallexample
PROCEDURE f* (VAR a: ARRAY OF C.int) @dots{}             (2)
PROCEDURE f* (a: POINTER TO ARRAY OF C.int) @dots{}      (3)
PROCEDURE f* (a: ARRAY OF C.int) @dots{}                 (4)
@end smallexample

@noindent
The choice depends on how the function @samp{f} accesses the argument
@samp{a}, and on whether values passed to this argument are mostly taken
from variables or from the heap.  If @samp{*a} is used as simple integer
variable, it translates to (1).  But if @samp{a} refers to an integer array,
variant (2) is used, and if it is an integer array stored exclusively on the
heap, number (3) might be used.  If the array argument passed to @samp{f} is
not modified by the function, it can be passed as a value array like in (4);
in this case, the C declaration typically adds the prefix @code{const} to
the parameter.

Now, consider a pointer argument of a structured based type @samp{T}:

@smallexample
void f(T *a) @{@dots{}@};
@end smallexample

@noindent
which offers one additional translation variant:

@smallexample
PROCEDURE f* (a: POINTER TO T) @dots{}
@end smallexample

@noindent
Again, whether a pointer value or the variable parameter is used depends on
the primary source of the argument.  If it is taken exclusively from heap
objects, the pointer value is more convenient.  Otherwise, it has to be
defined as variable parameter of type @samp{T}.

Note that the Oberon-2 declarations shown above are not completely accurate
in that it is not possible to use a @code{POINTER} type constructor in a
formal parameter list.  Instead, such types have to be declared beforehand
and their name used in the parameter list.



@node FOREIGN Modules, Large Arrays of Constants, INTERFACE Modules, Interfacing to C Code
@subsection FOREIGN Modules
@cindex FOREIGN module

A @dfn{foreign module} describes the interface of a standard Oberon-2 module
implemented in a non-standard way, say, in assembler or C.  By default, all
declarations are assumed to comply to standard Oberon-2 semantics.  All
types defined in such a module behave exactly like standard Oberon-2 types,
and all the normal operations are applicable to objects declared in a
foreign module.  The user cannot distinguish a foreign module from a normal
Oberon-2 module that has been implemented in the conventional way.

Care must be taken when integrating the implementation of a foreign module
with the compiler's run-time system.  This is typically done by writing an
empty Oberon-2 module with the desired interface, compiling it to C code,
and then editing the resulting files.

As a recommended guide, the following steps should be used when writing
foreign modules:

@enumerate
@item
Write an empty module @file{Foo.Mod} with all exported declarations.
@item
Compile it.
@item
Copy the generated file @file{Foo.c} to a suitable place, and check that the
copied file is the one actually used by the compiler, for example, by
invoking @kbd{oowhereis Foo.c}.
@item
In @file{Foo.c}, replace the line @samp{#include "Foo.d"} with the contents
of the file @file{Foo.d}.
@item
Modify the module header of @file{Foo.Mod} to include the proper
@samp{FOREIGN} directive, and remove all procedure bodies (including the
procedures' @code{END} parts).  For a module @samp{Foo}, the header should
look like this:

@example
MODULE Foo [FOREIGN "C"; LINK FILE "Foo.c" END];
@end example

The command @kbd{oocn --filter --mod2foreign Foo.Mod} performs the required
changes automatically and writes them into the file @file{Foo.txt}
(@pxref{oocn options}).
@item 
Fill in all the empty functions in @file{Foo.c}.  Note that all type
declarations in function headers should use the @samp{#defines} from
@file{__StdTypes.h} (i.e., @code{CHAR}, @code{BOOLEAN}, @code{SHORTINT},
etc.).
@end enumerate

For examples of foreign modules, refer to the implementation of the library
modules @samp{Signal}, @samp{PosixFileDesc}, or @samp{Files}.



@node Large Arrays of Constants, Limitations of oo2c, FOREIGN Modules, OO2C
@section Large Arrays of Constants

Some algorithms need large arrays of constant values that cannot be computed
by the program itself.  Examples of this are the tables used to approximate
mathematical functions, or the table of hexadecimal digits of @code{pi} used
by the Blowfish encryption algorithm.  Because such tables are an integral
part of these algorithms, it is not acceptable to simply read them from
external files.

In Oberon-2, there is basically only one way to create these tables. That
is, declare an array variable and write a huge list of assignments to fill
the table with the desired values.  The problem with this approach is that
it is highly inefficient.  It usually takes a long time for OOC to compile
such a list of assignments, and the generated code is a highly redundant C
file that is translated into a large object file.

While it is pointless to undertake any major effort to remedy the former
problem (large tables of constants are too infrequent to make it
worthwhile), it is possible to enhance the code generator to deal with the
latter.  Therefore, @code{oo2c} has been extended to detect certain kinds of
constant tables and translate them to array definitions with initialization
parts.  However, there are some restrictions:

@enumerate
@item
This mechanism only works for global array variables.

@item
The code to fill the array has to be placed in the module body, preferably
at its very beginning.

@item 
The code cannot be part of an conditional or loop statement; due to the
peculiarities of OOC's intermediate code representation this also implies
that it cannot be placed after an @code{ASSERT} or @code{HALT}.

@item
Any assignment placed after code that might affect the variable is
ignored, for example, after a procedure call with unknown side-effects.
To be safe, all assignments should be placed at the very beginning of
the module body.

@item 
There is a fixed upper limit on the number of constant entries (currently
this is one million elements).

@item
This mechanism cannot initialize an array of strings; this case is
translated into a sequence of string assignments as usual.
@end enumerate

An example of this is the module Blowfish@footnote{To avoid problems
with the export legislation of some countries, the encryption module is
distributed as a separate package @file{bfcrypt}}.  In the module body,
it initializes a two-dimensional array of @code{LONGINT}s with over a
thousand elements.  All of these assignments are removed by the backend
from the code file @file{Blowfish.c}.  Instead, they appear as part of
the definition of the array variable in @file{Blowfish.d}, reducing the
size of the object file by a significant amount.


@node Limitations of oo2c, Emacs Mode, Large Arrays of Constants, OO2C
@section Limitations of oo2c
@cindex oo2c limitations

Because the implementation of @code{oo2c} is a pre-compiler translating to a
high-level language, some run-time checks are only partial supported, or are
not supported at all.  For the complete list of run-time checks see
@ref{Options and Pragmas}.

@table @samp
@item RealOverflowCheck
@code{oo2c} only detects an overflow when using @code{SHORT()} to
convert a @code{LONGREAL} value to @code{REAL}.  Other overflows might
trigger a floating-point exception signal (@samp{SIGFPE}) and dump core,
or might go by unnoticed, depending on the system.

@item OverflowCheck
@code{oo2c} does not support any overflow checks for integers.

@item StackCheck
@code{oo2c} cannot detect an overflow of the program stack.  If array
parameters are managed on a separate stack (@pxref{oo2c C options}),
enabling this run-time check makes it possible for the program to detect
an overflow of the auxiliary stack.
@end table

The error reporting of the math modules @samp{LowReal}, @samp{LowLReal},
@samp{RealMath}, and @samp{LRealMath} is not implemented as described in
this reference manual.  This is a problem of the math modules, not of the
manual.  There is no practical reason why the math modules cannot adhere to
the specifications; but due to lack of time, correct error reporting has not
been implemented yet.



@node Emacs Mode, o2-mode installation, Limitations of oo2c, OO2C
@section Emacs Mode
@cindex Emacs
@cindex Oberon-2 major mode
@cindex oberon2.el

@code{oo2c} comes with a Oberon-2 major mode for the Free Software
Foundation's GNU Emacs, which helps manage Oberon-2 source code.  It offers
various keyboard shortcuts to insert skeletons for Oberon-2 constructs,
locate Oberon-2 files and declarations, compile modules, and to display
error messages.  It can make the task of writing an Oberon-2 program
considerably easier.

All configuration commands mentioned in the subsequent sections are also
listed in the file @file{o2-default.el}.  In the distribution archive, it
resides in the @file{src/tools/emacs} directory.  After installation, it can
be found in the same directory as the file @file{oberon2.el}.

@menu
* o2-mode installation::        Integrating the new package with Emacs.
* o2-mode functions::           Functions provided by Oberon-2 Mode
* o2-mode hints::               Tips and tricks to improve things further.
@end menu


@node o2-mode installation, o2-mode functions, Emacs Mode, Emacs Mode
@subsection Installing the Oberon-2 Package

To use the Oberon-2 emacs major-mode, add the following lines to your Emacs
initialization file (@file{~/.emacs}):

@smallexample
;; set load-path to incorporate directory with oberon2.el
(setq load-path (cons "/usr/local/lib/oo2c" load-path))
;; auto load oberon2.el if oberon-2-mode is called
(autoload 'oberon-2-mode "oberon2" "The Oberon-2 major mode." t)
;; set oberon-2-mode as major mode for all files ending in ".Mod"
(setq auto-mode-alist 
        (cons '("\\.Mod$" . oberon-2-mode) auto-mode-alist))
@end smallexample

The file @file{oberon2.el} is installed during installation of OOC, and so
it may reside in another location than the path given above; modify the
@samp{load-path} setting accordingly.  If you are using Emacs version 19.22
or older, replace @samp{"oberon2"} with @samp{"oberon2_18"} in the line
@samp{(autoload @dots{})}.  The package @file{oberon2.el} works only
with the @file{compile.el} package of Emacs 19.28 (or above, I hope).  Note
that @file{oberon2_18.el} is an older version of the package, and is no
longer maintained; it does not support all the features of the current
version.

If you have write permissions to system directories, a simple way to install
the Oberon-2 mode for all users on the system is to copy @file{oberon2.el}
into one of the directories of Emacs's load path (e.g.,
@file{/usr/lib/emacs/site-lisp}).  (To get the list of searched directories
on your system, type @kbd{C-h v load-path} in Emacs.)  Then, add the above
commands for @samp{autoload} and @samp{auto-mode-alist} to the file
@file{default.el}.  If no default file exists, you can create one somewhere
in Emacs's load path, say, the same directory you used for
@file{oberon2.el}.  You could also consider adding the contents of file
@file{o2-default.el} to @file{default.el}; among other things, it contains
the @samp{autoload} commands given above.  Assuming that the permissions of
both files are correct, all users on the system should have access to the
Oberon-2 mode without needing to change any personal initialization files.


@node o2-mode functions, o2-mode hints, o2-mode installation, Emacs Mode
@subsection Functions of the Oberon-2 Mode

The keyboard shortcuts listed below are available for every buffer in
Oberon-2 mode.  This list is also available online by pressing @kbd{C-h m}
in such a buffer.

Indentation:

@table @kbd
@item RET
Make a newline, but indent like the previous line.
@item TAB
Indent @code{o2-indent} spaces.  With a numeric prefix, indent region.
@item DEL
Convert tabs to spaces while moving backward.
@item C-c TAB
Add/remove indentation level(s) to region [deprecated, use @kbd{TAB}].
@end table

The variable @code{o2-ident} determines how many spaces are inserted per
indentation level (the default is 2).

Inserting Oberon-2 constructs:

@table @kbd
@item C-c C-c
Comment region.
@item C-c C-v
Uncomment text around point.
@item C-c m
@code{MODULE} outline.
@item C-c p
@code{PROCEDURE} outline. 
@item C-c t
Type-bound @code{PROCEDURE} outline. 
@item C-c C-t
Redefinition of type-bound @code{PROCEDURE}.
@item C-c i
@code{IF} @dots{} @code{THEN} statement.
@item C-c C-e
Insert @code{ELSIF}.
@item C-c c
@code{CASE} statement.
@item C-c C-w
@code{WITH} statement.
@item C-c e
Insert @code{ELSE}.
@item C-c b
Insert a @code{|}.
@item C-c f
@code{FOR} statement.
@item C-c w
@code{WHILE} statement.
@item C-c r
@code{REPEAT} @dots{} @code{UNTIL} statement. 
@item C-c l
@code{LOOP} statement.
@item C-c C-r
@code{RECORD} constructor.
@item C-c h
Comment with various information about the module.
@end table

Move by procedure headings:

@table @kbd
@item C-c C-n
Move to next procedure.
@item C-c C-p
Move to previous procedure.
@item C-c C-u
Move to procedure in which the present one is nested.
@item M-C-h
Put mark at end of procedure, and point at the beginning.
@end table

Functions to hide procedure bodies and declarations:

@table @kbd
@item C-c C-h
Hide whole procedure.
@item C-c C-s
Show whole procedure again.
@item C-c C-l
Hide bodies of all local procedures.
@item M-x o2-hide-proc
Hide local declarations and the procedure body.
@item M-x o2-show-proc
Show local declarations and body again.
@item M-x o2-hide-all
Hide all of buffer except procedure headings.
@item M-x o2-show-all
Make all text in the buffer visible again.
@end table

Managing source code:

@table @kbd
@item C-c C-f
Find file for a given module name.
@item C-c 4 f
Like @kbd{C-c C-f}, but display in another window.
@item C-c 5 f
Like @kbd{C-c C-f}, but display in another frame.
@item C-c C-d
Generate and display the definition of a module.
@item C-c 4 d
Like @kbd{C-c C-d}, but display in another window.
@item C-c 5 d
Like @kbd{C-c C-d}, but display in another frame.
@item C-c .
Display (same window) the definition of an identifier.
@item C-c 4 .
Display (other window) the definition of an identifier.
@item C-c 5 .
Display (other frame) the definition of an identifier.
@item C-c /
Display, and blink to, declaration of identifier under cursor.
@item C-c ,
Display (same window) a procedure bound to a given type.
@item C-c 4 ,
Display (other window) a procedure bound to a given type.
@item C-c 5 ,
Display (other frame) a procedure bound to a given type.
@item C-c u
Step through all uses of a declaration with @kbd{C-c '}.
@end table
All the above functions accept a module's alias name (as declared in the
current buffers @code{IMPORT} list) instead of the real module name.  For
further information on @kbd{C-c .} or @kbd{C-c ,} use @kbd{C-h k}.

Any of the functions that display files in another window or frame do not
change the selected window if the @kbd{C-u} prefix is set.  For example,
@kbd{C-u C-c 4 .} displays the source of the definition of the given
identifier in another window, but the current window stays selected and
point stays at the current position.

@kbd{S-mouse-3} (i.e., shift with right mouse button), similar to @kbd{C-c
/}, invokes @kbd{C-u C-c 4 .} with the qualified identifier under the mouse
cursor as argument and blink to the found position.

Compiling:

@table @kbd
@item M-c
Compile current buffer.
@item C-u M-c
Prompt for compile command and compile current buffer.
@item M-C-c
Run a make on a module.
@item C-c '
Display the next error.
@item C-c g
Prompt for module and error position, goto position.
@end table

Also, please note the following:

@itemize @bullet
@item
Searches are case sensitive.
@item
Both the @kbd{DEL} key and the @kbd{backspace} key automatically
convert tabs to spaces as they step back.  
@item
In o2-mode, the @kbd{TAB} key does not insert any new tab characters, but
instead, inserts @code{o2-indent} spaces.
@item
@kbd{M-;} indents or create a comment on the current line at column 41
(default).
@item
Since GNU Emacs 19.29, the Oberon-2 menu can also be invoked with
@kbd{C-mouse-3} (i.e., control with right mouse button).
@end itemize


@node o2-mode hints, , o2-mode functions, Emacs Mode
@subsection Additional Tips&Tricks

Add @samp{(setq o2-cwd (expand-file-name "dir"))} to @file{~/.emacs} if you
want Emacs to execute @code{oo2c}, @code{oob}, and so forth in the directory
@file{dir}, regardless of the working directory the editor was started from.

Typically, the most often used function is the one that places the cursor at
the next error position after a compile.  This is bound to the 2-key
sequence @kbd{C-c '} (or @kbd{C-c `}).  To bind this function to a single
key, say @kbd{F8}, add one of the following lines to @file{~/.emacs}:

@smallexample
   (global-set-key [f8] 'o2-next-error)
@end smallexample

@noindent
which works under @code{X} and recent (>=19) versions of Emacs, or

@smallexample
   (global-set-key "[19~" 'o2-next-error)
@end smallexample

@noindent
for text terminals and older versions of Emacs (replace the cryptic string
@samp{[19~} by the one that Emacs produces when pressing @kbd{C-q
F8}).

If you are working with an X color display, you might try to add the
following piece of code to your @file{~/.emacs} file (for version 19+).
It enables the @samp{Font Lock} minor mode for Oberon-2 buffers,
colorizing procedure headers, keywords, comments, pragmas, and strings:

@smallexample
(add-hook 'oberon-2-mode-hook 
	  (lambda ()
	    ;(o2-font-lock-hilit-colors)
	    (turn-on-font-lock)))
(setq font-lock-maximum-decoration t)
@end smallexample

@noindent
In case you prefer the color scheme of the @samp{hilit19} package, you
should uncomment the function inside the lambda clause above.  Note that
this will change the colors for all buffers with @samp{Font Lock}
enabled, though.  @samp{Font Lock} supports different levels of
fontification, with rendering of higher levels taking more time to
display.  The value @code{t} selects maximum (and slowest) decoration.

As another option it is possible to enable a pull-down index menu for
comfortable navigation in a source module.  The index lists all record,
procedure, and type-bound procedure declarations of the module.
Selecting a menu item will move the cursor to the place of the
declaration.  This command enables this feature, adding a ``Index''
pull-down menu to the left of the ``Oberon-2'' menu:

@smallexample
(add-hook 'oberon-2-mode-hook
          (lambda ()
            (imenu-add-to-menubar "Index")))
@end smallexample

Other possible additions to @file{~/.emacs} are the commands listed below.
They put compilation shells into special frames instead of splitting
the current frame.  The special frames are of height 10 and placed in the
upper right corner of the display; they use a smaller font, menu and scroll
bars are disabled, and the frame raises itself to the foreground when the
mouse cursor enters it and lowers itself when left by the mouse cursor.
@strong{Please note}: This only works with Emacs versions 19.31 and higher.
These settings are included in file @file{o2-default.el}

@smallexample
(if window-system
    (let ((o2-frame-params 
           '((height . 10)
             (unsplittable . t) (menu-bar-lines . 0)
             (left . (- 0)) (top . 0) (user-position . t)
             (font . "5x7") (width . 60) (auto-raise . t) 
             (vertical-scroll-bars . nil) (auto-lower . t)
             (name . "o2-compilation"))))
      (setq special-display-regexps
            `(("^\\*o2-compile.*\\*$" . ,o2-frame-params)
              ("^\\*o2-make.*\\*$" . ,o2-frame-params)))))
@end smallexample
