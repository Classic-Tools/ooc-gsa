/* file generated by oo2c -- do not edit */
#include "ParseExpr.h"
#include "ConstPropagation.h"
#include "Error.h"
#include "IntArith.h"
#include "Opcode.h"
#include "Scanner.h"
#include "StdPragmas.h"
#include "StdTypes.h"
#include "Strings.h"
#include "SymbolTable.h"

/* local definitions */
Attributes__Item ParseExpr__receiverDesignator;
void(* ParseExpr__ProcedureCall)(Data__Region region, const Attributes__Item *proc__ref, Attributes__Item *result, _Type result__tag, Attributes__ExitInfo *exitInfo, _Type exitInfo__tag, unsigned char statement);
void(* ParseExpr__CommitIfMerge)(Data__Region region);
void(* ParseExpr__FixupCondPath)(Data__Region path, Data__Merge oldMerge, Data__Merge merge, unsigned char innerMost);
void(* ParseExpr__AssignToVar)(Data__Region region, Data__Object dest, Attributes__Item *x, _Type x__tag);
void(* ParseExpr__ReclaimFromMem)(Data__Instruction instr);

/* function prototypes */
unsigned char ParseExpr__DegenerateValueParam(Data__Object obj);
void ParseExpr__RedoDesignatorAccess_DuplicateAccessChain_CopyOpndPos(Data__Instruction from, Data__Instruction to);
Data__Usable ParseExpr__RedoDesignatorAccess_DuplicateAccessChain(Data__Usable value, Attributes__Item *ParseExpr__RedoDesignatorAccess_x, Data__Region *ParseExpr__RedoDesignatorAccess_region);
unsigned char ParseExpr__RedoDesignatorAccess_SideEffected(Attributes__Item *x, _Type x__tag);
void ParseExpr__CheckType(Data__Struct type, signed char expected, int pos);
unsigned char ParseExpr__TypeTest_HasDynamicType(Attributes__Item *x, _Type x__tag);
short int ParseExpr__TypeTest_BaseTypes(Data__Struct t);
Data__Const ParseExpr__TypeConversion_GetIntConst(int value, unsigned char *ParseExpr__TypeConversion_adaptType, signed char *ParseExpr__TypeConversion_targetType);
unsigned char ParseExpr__TypeConversion_SameConstRepr(signed char t1, signed char t2);
void ParseExpr__Designator_Deref(unsigned char checkForPtr, Attributes__Item *ParseExpr__Designator_x, Data__Region *ParseExpr__Designator_region, _Type ParseExpr__Designator_x__tag);
Data__Usable ParseExpr__Designator_FieldAddress(Attributes__Item *x, _Type x__tag, Data__Object field, Data__Region *ParseExpr__Designator_region);
Data__Usable ParseExpr__Designator_ElementAddress(Data__Usable baseAdr, Data__Usable index, Data__Usable elementSize, int pos, Data__Region *ParseExpr__Designator_region);
void ParseExpr__Designator_FixPosition(Data__Instruction access);
unsigned char ParseExpr__Designator_AbstractSuperCall(Data__Object tbProc, Data__Struct base);
signed char ParseExpr__CheckOperandType(Attributes__Item *x, _Type x__tag, unsigned int legalTypes, unsigned int legalTypeGroups);
void ParseExpr__Factor_Set_Element(Attributes__Item *x, _Type x__tag, Data__Region *ParseExpr__Factor_region, Data__Struct *ParseExpr__Factor_Set_type);
void ParseExpr__Factor_Set(Data__Struct type, Attributes__Item *ParseExpr__Factor_x, _Type ParseExpr__Factor_x__tag, Data__Region *ParseExpr__Factor_region, int *ParseExpr__Factor_pos);
unsigned char ParseExpr__Factor_PredefinedProc(Data__Object obj);
void ParseExpr__Factor(Data__Region region, Attributes__Item *x, _Type x__tag);
unsigned char ParseExpr__SwitchMergeOpnds(Data__Usable u, short int count);
void ParseExpr__FixOldValues(Data__Region path);
unsigned char ParseExpr__InsertGatePlaceholders_NoGateExists(Data__Region r, Data__Object var);
void ParseExpr__InsertGatePlaceholders(Data__Region r);
void ParseExpr__CondAnd(Data__Region region, Attributes__Item *x, _Type x__tag, Data__Usable rhs, unsigned char negate);
void ParseExpr__Term(Data__Region region, Attributes__Item *x, _Type x__tag);
void ParseExpr__CondOr(Data__Region region, Attributes__Item *x, _Type x__tag, Data__Usable rhs, unsigned char negate);
Data__Const ParseExpr__SimpleExpr_Concat_Assemble(unsigned char* dest, int dest_0d, int sizeChar, signed char form, unsigned char* src0, int src0_0d, int len0, unsigned char* src1, int src1_0d, int len1);
Data__Const ParseExpr__SimpleExpr_Concat(Data__Const x, Data__Const y);
void ParseExpr__SimpleExpr(Data__Region region, Attributes__Item *x, _Type x__tag);
void ParseExpr__ConditionExit_SetItem(Attributes__Item *x, _Type x__tag, Data__Object var, unsigned char negate, Data__Region *ParseExpr__ConditionExit_region);
void ParseExpr__ConditionExit_Connect(Attributes__Item *x, _Type x__tag, Data__Usable rhs, unsigned char negate, unsigned char *ParseExpr__ConditionExit_andNeg, Data__Region *ParseExpr__ConditionExit_region);

/* module and type descriptors */
static const struct {
  int length;
  void* pad;
  const void* list[26];
} _p0 = {26, NULL, {
  (const void*)&ParseExpr__AccessVar,
  (const void*)&ParseExpr__AddStructToEnter,
  (const void*)&ParseExpr__BoundSetElement,
  (const void*)&ParseExpr__CheckValue,
  (const void*)&ParseExpr__Condition,
  (const void*)&ParseExpr__ConditionExit,
  (const void*)&ParseExpr__ConstExpr,
  (const void*)&ParseExpr__Designator,
  (const void*)&ParseExpr__Dominates,
  (const void*)&ParseExpr__EvalDyadicOp,
  (const void*)&ParseExpr__EvalInstr,
  (const void*)&ParseExpr__EvalMonadicOp,
  (const void*)&ParseExpr__Expr,
  (const void*)&ParseExpr__GuardClass,
  (const void*)&ParseExpr__InsertTempCopy,
  (const void*)&ParseExpr__IsCondResult,
  (const void*)&ParseExpr__Qualident,
  (const void*)&ParseExpr__QueryTempCopy,
  (const void*)&ParseExpr__RedoDesignatorAccess,
  (const void*)&ParseExpr__ResetVariables,
  (const void*)&ParseExpr__SplitIfPaths,
  (const void*)&ParseExpr__SplitPaths,
  (const void*)&ParseExpr__StringConvertible,
  (const void*)&ParseExpr__TypeConversion,
  (const void*)&ParseExpr__TypeQualident,
  (const void*)&ParseExpr__TypeTest,
}};
static const struct {
  int length;
  void* pad;
  const void* list[6];
} _p1 = {6, NULL, {
  (const void*)&ParseExpr__AssignToVar,
  (const void*)&ParseExpr__CommitIfMerge,
  (const void*)&ParseExpr__FixupCondPath,
  (const void*)&ParseExpr__ProcedureCall,
  (const void*)&ParseExpr__ReclaimFromMem,
  (const void*)&ParseExpr__receiverDesignator,
}};
static const struct {
  int length;
  void* pad;
  const char name[10];
} _n0 = {10, NULL, {"ParseExpr"}};
static struct _MD ParseExpr_md = {
  NULL, 
  &Kernel__ModuleDesc_td.td, 
  {
    NULL, 
    (const unsigned char*)_n0.name, 
    -1, 
    NULL,
    _p0.list,
    _p1.list,
    -1263265163
  }
};

/* local strings */
static const unsigned char _c4[] = "XX";
static const unsigned char _c3[] = "\077\077\077";
static const unsigned char _c2[] = "Set";
static const unsigned char _c1[] = "Integer";
static const unsigned char _c0[] = "Boolean";

