/* file generated by oo2c -- do not edit */
#include "Allocate.h"
#include "Classify.h"
#include "GenConst.h"
#include "IntStr.h"
#include "Opcode.h"
#include "Out.h"
#include "SystemFlags.h"
#include "Schedule.h"
#include "StdTypes.h"
#include "Strings.h"
#include "SymbolTable.h"

/* local definitions */
typedef unsigned int* Allocate__BitMatrix;
typedef unsigned int* Allocate__BitVector;
typedef int* Allocate__LongintVector;
typedef Data__Info* Allocate__ResultVector;
typedef struct Allocate__RangeInfo {
  int rows;
  int currRows;
  int cols;
  int currCols;
  Allocate__BitMatrix m;
  Allocate__BitVector v;
  Allocate__LongintVector d;
  Allocate__LongintVector s;
  Allocate__LongintVector ds;
  Allocate__ResultVector res;
} Allocate__RangeInfo;
typedef Allocate__Location* Allocate__LocationVector;
typedef struct Allocate__LiveRangeListDesc {
  struct Allocate__LiveRangeListDesc* next;
  Data__Instruction result;
} Allocate__LiveRangeListDesc;
typedef struct Allocate__LiveRangeListDesc* Allocate__LiveRangeList;
typedef struct Allocate__RegFileSummary {
  int globalCount;
  Allocate__LiveRangeList globals;
  Allocate__LiveRangeList gateArgs;
  int localCount;
  int localStart;
  Allocate__BitMatrix gi;
  Allocate__LocationVector locations;
  int lrCount;
} Allocate__RegFileSummary;
typedef struct Allocate__RegionSummaryDesc {
  Allocate__RegFileSummary rf[4];
} Allocate__RegionSummaryDesc;
typedef struct Allocate__RegionSummaryDesc* Allocate__RegionSummary;
static Allocate__RangeInfo Allocate__rangeInfo[4];
static int Allocate__locCount;
static Allocate__LocationVector Allocate__locVector;
static Allocate__BitVector Allocate__liveStack;
static int Allocate__topStack;
static Data__Result Allocate__undefResult;
static Data__Info Allocate__copyMarker;
static int Allocate__allocCounter[256];
typedef struct Allocate__ResolveVarConflicts_1 {
  Data__Result reads;
  Data__Usable writes;
} Allocate__ResolveVarConflicts_1;
typedef struct Allocate__ResolveVarConflicts_0 {
  Allocate__ResolveVarConflicts_1* list;
} Allocate__ResolveVarConflicts_0;

/* function prototypes */
Allocate__Location Allocate__ConcatLoc(const unsigned char* str1__ref, int str1_0d, const unsigned char* str2__ref, int str2_0d, const unsigned char* str3__ref, int str3_0d);
unsigned char Allocate__TransformLocation_NonlocalRef(Data__GlobalRegion greg, Data__Object obj);
unsigned char Allocate__TransformLocation_NonlocalPassPerRef(Data__GlobalRegion greg, Data__Object obj);
unsigned char Allocate__PassThroughInstr(Data__Instruction instr);
void Allocate__ResolveVarConflicts_MarkObjects(Data__Object obj, int *Allocate__ResolveVarConflicts_counter);
void Allocate__ResolveVarConflicts_MarkInstructions(Data__Region r, int *Allocate__ResolveVarConflicts_icounter);
typedef struct Allocate__ResolveVarConflicts_0* Allocate__ResolveVarConflicts_InfoArray;
struct Allocate__ResolveVarConflicts_0* Allocate__ResolveVarConflicts_NewInfo(int *Allocate__ResolveVarConflicts_counter);
struct Allocate__ResolveVarConflicts_0* Allocate__ResolveVarConflicts_CopyInfo(struct Allocate__ResolveVarConflicts_0* ia, int *Allocate__ResolveVarConflicts_counter);
unsigned char Allocate__ResolveVarConflicts_ScanRegions_ScalarLocalVar(Data__Location loc, Data__Object *obj, Data__GlobalRegion *Allocate__ResolveVarConflicts_greg);
void Allocate__ResolveVarConflicts_ScanRegions_Conflict_Copy(Data__Result res);
unsigned char Allocate__ResolveVarConflicts_ScanRegions_Conflict(Data__Result res0, Data__Result res1);
unsigned char Allocate__ResolveVarConflicts_ScanRegions_WriteConflict(struct Allocate__ResolveVarConflicts_0* ia, Data__Usable u, int marker);
unsigned char Allocate__ResolveVarConflicts_ScanRegions_ReadConflict(struct Allocate__ResolveVarConflicts_0* ia, Data__Result res, int marker);
unsigned char Allocate__ResolveVarConflicts_ScanRegions_HandleRegion(struct Allocate__ResolveVarConflicts_0* ia, Data__Region region, int *Allocate__ResolveVarConflicts_counter);
unsigned char Allocate__ResolveVarConflicts_ScanRegions_ScanGates(struct Allocate__ResolveVarConflicts_0* ia, Data__Merge merge, short int opn, Data__Object *Allocate__ResolveVarConflicts_ScanRegions_obj, Data__GlobalRegion *Allocate__ResolveVarConflicts_greg);
unsigned char Allocate__ResolveVarConflicts_ScanRegions_SummarizeMerge_Before(Data__Instruction a, Data__Instruction b);
Data__Instruction Allocate__ResolveVarConflicts_ScanRegions_SummarizeMerge(Data__Merge merge, int *Allocate__ResolveVarConflicts_counter, int *Allocate__ResolveVarConflicts_ScanRegions_i);
Data__Result Allocate__ResolveVarConflicts_ScanRegions_GetResult(Data__Usable u);
unsigned char Allocate__ResolveVarConflicts_ScanRegions(Data__Region r, int *Allocate__ResolveVarConflicts_counter, Data__GlobalRegion *Allocate__ResolveVarConflicts_greg);
void Allocate__ResolveVarConflicts(Data__GlobalRegion greg);
signed char Allocate__TargetRegFile(Data__Instruction instr);
unsigned char Allocate__BuildInterferenceGraphs_NonlocalUse(Data__Result res, Data__Region region);
unsigned char Allocate__BuildInterferenceGraphs_LiveAcrossRegion_PathExists_PlacedAfter(Data__Instruction a, Data__Instruction b);
unsigned char Allocate__BuildInterferenceGraphs_LiveAcrossRegion_PathExists(Data__Region from, Data__Instruction to);
unsigned char Allocate__BuildInterferenceGraphs_LiveAcrossRegion(Data__Instruction instr, Data__Region r);
unsigned char Allocate__BuildInterferenceGraphs_AddToGlobal_LocalGateArg(Data__Instruction merge, Data__Result result);
void Allocate__BuildInterferenceGraphs_AddToGlobal(Data__Region r, Allocate__RegFileSummary *rf, _Type rf__tag, signed char reg, Data__Instruction instr);
void Allocate__BuildInterferenceGraphs_AllocateRangeInfo(signed char reg, int size);
void Allocate__BuildInterferenceGraphs_Interfere(signed char reg, int id, int *Allocate__BuildInterferenceGraphs_i);
void Allocate__BuildInterferenceGraphs_AddToLive(signed char reg, int id, int *Allocate__BuildInterferenceGraphs_i);
void Allocate__BuildInterferenceGraphs_RemoveFromLive(Data__Instruction result);
void Allocate__BuildInterferenceGraphs_SymmetricMatrix(signed char reg);
unsigned char Allocate__BuildInterferenceGraphs_IntegrateInstruction_IntegrateMerge_GateOpnd(Data__Merge merge, short int opn, Data__Result res);
Data__Instruction Allocate__BuildInterferenceGraphs_IntegrateInstruction_IntegrateMerge(Data__Merge merge, Data__Opnd *Allocate__BuildInterferenceGraphs_IntegrateInstruction_opnd, int *Allocate__BuildInterferenceGraphs_i);
Data__Instruction Allocate__BuildInterferenceGraphs_IntegrateInstruction(Data__Instruction instr, int *Allocate__BuildInterferenceGraphs_i);
void Allocate__BuildInterferenceGraphs_SetResult(signed char reg, int id, Data__Info res);
void Allocate__BuildInterferenceGraphs(Data__Region r, Allocate__RegionSummary summary);
int Allocate__CoalesceRanges_ScanGates_LiveRangeId(Data__Instruction instr, signed char reg, Allocate__RegionSummary *Allocate__CoalesceRanges_summary);
void Allocate__CoalesceRanges_ScanGates_TryCoalescing_Merge(int src, int dest, signed char *Allocate__CoalesceRanges_ScanGates_TryCoalescing_reg);
void Allocate__CoalesceRanges_ScanGates_TryCoalescing(int gateId, signed char reg, Data__Usable arg, Allocate__RegionSummary *Allocate__CoalesceRanges_summary);
void Allocate__CoalesceRanges_ScanGates(Data__Merge merge, unsigned char loopBackedge, signed char *Allocate__CoalesceRanges_reg, Allocate__RegionSummary *Allocate__CoalesceRanges_summary);
void Allocate__CoalesceRanges(Data__Region r, Allocate__RegionSummary summary);
void Allocate__ColorGraph_CreateLocation(void);
void Allocate__ColorGraph_SiftToLeaf(int i, int n, Allocate__LongintVector *Allocate__ColorGraph_s, Allocate__LongintVector *Allocate__ColorGraph_d, Allocate__LongintVector *Allocate__ColorGraph_ds);
void Allocate__ColorGraph_BuildHeap(int n, Allocate__LongintVector *Allocate__ColorGraph_s, Allocate__LongintVector *Allocate__ColorGraph_d, Allocate__LongintVector *Allocate__ColorGraph_ds);
void Allocate__ColorGraph(Data__Region r, Allocate__RangeInfo *ri, _Type ri__tag, signed char reg, Allocate__RegFileSummary *rf, _Type rf__tag);
void Allocate__UpdateSummary(Allocate__RangeInfo *ri, _Type ri__tag, Allocate__RegFileSummary *rf, _Type rf__tag);
void Allocate__Region_InterfereGlobalRanges(Allocate__RangeInfo *ri, _Type ri__tag, Allocate__RegFileSummary *rf, _Type rf__tag);
void Allocate__Region_CorrectGlobalInterference(Allocate__RangeInfo *ri, _Type ri__tag, Allocate__RegFileSummary *rf, _Type rf__tag);
void Allocate__Region(Data__Region r);
void Allocate__GlobalRegion_AssignRegisters(Allocate__RegFileSummary *rf, _Type rf__tag, const unsigned char* prefix__ref, int prefix_0d);
void Allocate__GlobalRegion_PropagateRegisters(Data__Region r, signed char reg);
void Allocate__GlobalRegion_MemoryLocations(Data__Region r, Data__GlobalRegion *Allocate__GlobalRegion_greg);
void Allocate__GlobalRegion_Marker2Pos(Data__Region r);
void Allocate__EmitVariables_WriteRegisters_WriteDeclarations(const unsigned char* prefix__ref, int prefix_0d, signed char reg, signed char off, Data__GlobalRegion *Allocate__EmitVariables_greg, TextRider__Writer *Allocate__EmitVariables_w);
void Allocate__EmitVariables_WriteRegisters(signed char off, Data__GlobalRegion *Allocate__EmitVariables_greg, TextRider__Writer *Allocate__EmitVariables_w);
void Allocate__EmitVariables_WriteAssignments_WriteList(const unsigned char* prefix__ref, int prefix_0d, signed char reg, Data__GlobalRegion *Allocate__EmitVariables_greg, TextRider__Writer *Allocate__EmitVariables_w, unsigned char* Allocate__EmitVariables_WriteAssignments_aprefix0, int Allocate__EmitVariables_WriteAssignments_aprefix0_0d, unsigned char* Allocate__EmitVariables_WriteAssignments_aprefix1, int Allocate__EmitVariables_WriteAssignments_aprefix1_0d);
void Allocate__EmitVariables_WriteAssignments(const unsigned char* aprefix0__ref, int aprefix0_0d, const unsigned char* aprefix1__ref, int aprefix1_0d, Data__GlobalRegion *Allocate__EmitVariables_greg, TextRider__Writer *Allocate__EmitVariables_w);

/* module and type descriptors */
static const struct {
  int length;
  void* pad;
  const void* list[12];
} _p0 = {12, NULL, {
  (const void*)&Allocate__AccessNonlocal,
  (const void*)&Allocate__EmitVariables,
  (const void*)&Allocate__FindOperand,
  (const void*)&Allocate__FindResult,
  (const void*)&Allocate__GetAddressValue,
  (const void*)&Allocate__GetLocation,
  (const void*)&Allocate__GlobalRegion,
  (const void*)&Allocate__NewLoc,
  (const void*)&Allocate__PtrValue,
  (const void*)&Allocate__TransformLocation,
  (const void*)&Allocate__WriteRegType,
  (const void*)&Allocate__WriteStats,
}};
static const struct {
  int length;
  void* pad;
  const void* list[0];
} _p1 = {0, NULL, {
}};
static const struct {
  int length;
  void* pad;
  const char name[9];
} _n0 = {9, NULL, {"Allocate"}};
static struct _MD Allocate_md = {
  NULL, 
  &Kernel__ModuleDesc_td.td, 
  {
    NULL, 
    (const unsigned char*)_n0.name, 
    -1, 
    NULL,
    _p0.list,
    _p1.list,
    81434580
  }
};

static const struct {
  int length;
  void* pad;
  const char name[13];
} _n1 = {13, NULL, {"LocationDesc"}};
static const struct {
  int length;
  void* pad;
  _Type btypes[3];
} Allocate__LocationDesc_tdb = {
  3, 
  NULL, 
  {
    &Data__InfoDesc_td.td, 
    &Data__LocationDesc_td.td, 
    &Allocate__LocationDesc_td.td
  }
};
static const struct {
  int length;
  void* pad;
  const void* tbprocs[1];
} _tb0 = {0, NULL, {
  NULL
}};
struct _TD Allocate__LocationDesc_td = {
  NULL,
  &Types__TypeDesc_td.td,
  {
    Allocate__LocationDesc_tdb.btypes,
    _tb0.tbprocs,
    (const unsigned char*)_n1.name,
    &Allocate_md.md,
    2, 
    '0', '1',
    sizeof(Allocate__LocationDesc),
    NULL
  }
};

static const struct {
  int length;
  void* pad;
  const char name[10];
} _n2 = {10, NULL, {"RangeInfo"}};
static const struct {
  int length;
  void* pad;
  _Type btypes[1];
} Allocate__RangeInfo_tdb = {
  1, 
  NULL, 
  {
    &Allocate__RangeInfo_td.td
  }
};
static const struct {
  int length;
  void* pad;
  const void* tbprocs[1];
} _tb1 = {0, NULL, {
  NULL
}};
struct _TD Allocate__RangeInfo_td = {
  NULL,
  &Types__TypeDesc_td.td,
  {
    Allocate__RangeInfo_tdb.btypes,
    _tb1.tbprocs,
    (const unsigned char*)_n2.name,
    &Allocate_md.md,
    0, 
    '0', '1',
    sizeof(Allocate__RangeInfo),
    &Allocate__LocationDesc_td.td
  }
};

static const struct {
  int length;
  void* pad;
  const char name[15];
} _n3 = {15, NULL, {"RegFileSummary"}};
static const struct {
  int length;
  void* pad;
  _Type btypes[1];
} Allocate__RegFileSummary_tdb = {
  1, 
  NULL, 
  {
    &Allocate__RegFileSummary_td.td
  }
};
static const struct {
  int length;
  void* pad;
  const void* tbprocs[1];
} _tb2 = {0, NULL, {
  NULL
}};
struct _TD Allocate__RegFileSummary_td = {
  NULL,
  &Types__TypeDesc_td.td,
  {
    Allocate__RegFileSummary_tdb.btypes,
    _tb2.tbprocs,
    (const unsigned char*)_n3.name,
    &Allocate_md.md,
    0, 
    '0', '1',
    sizeof(Allocate__RegFileSummary),
    &Allocate__RangeInfo_td.td
  }
};

static const struct {
  int length;
  void* pad;
  const char name[18];
} _n4 = {18, NULL, {"RegionSummaryDesc"}};
static const struct {
  int length;
  void* pad;
  _Type btypes[2];
} Allocate__RegionSummaryDesc_tdb = {
  2, 
  NULL, 
  {
    &Data__InfoDesc_td.td, 
    &Allocate__RegionSummaryDesc_td.td
  }
};
static const struct {
  int length;
  void* pad;
  const void* tbprocs[1];
} _tb3 = {0, NULL, {
  NULL
}};
struct _TD Allocate__RegionSummaryDesc_td = {
  NULL,
  &Types__TypeDesc_td.td,
  {
    Allocate__RegionSummaryDesc_tdb.btypes,
    _tb3.tbprocs,
    (const unsigned char*)_n4.name,
    &Allocate_md.md,
    1, 
    '0', '1',
    sizeof(Allocate__RegionSummaryDesc),
    &Allocate__RegFileSummary_td.td
  }
};

static const struct {
  int length;
  void* pad;
  const char name[18];
} _n5 = {18, NULL, {"LiveRangeListDesc"}};
static const struct {
  int length;
  void* pad;
  _Type btypes[1];
} Allocate__LiveRangeListDesc_tdb = {
  1, 
  NULL, 
  {
    &Allocate__LiveRangeListDesc_td.td
  }
};
static const struct {
  int length;
  void* pad;
  const void* tbprocs[1];
} _tb4 = {0, NULL, {
  NULL
}};
struct _TD Allocate__LiveRangeListDesc_td = {
  NULL,
  &Types__TypeDesc_td.td,
  {
    Allocate__LiveRangeListDesc_tdb.btypes,
    _tb4.tbprocs,
    (const unsigned char*)_n5.name,
    &Allocate_md.md,
    0, 
    '0', '1',
    sizeof(Allocate__LiveRangeListDesc),
    &Allocate__RegionSummaryDesc_td.td
  }
};

static const struct {
  int length;
  void* pad;
  _Type btypes[1];
} Allocate__ResolveVarConflicts_1_tdb = {
  1, 
  NULL, 
  {
    &Allocate__ResolveVarConflicts_1_td.td
  }
};
static const struct {
  int length;
  void* pad;
  const void* tbprocs[1];
} _tb5 = {0, NULL, {
  NULL
}};
struct _TD Allocate__ResolveVarConflicts_1_td = {
  NULL,
  &Types__TypeDesc_td.td,
  {
    Allocate__ResolveVarConflicts_1_tdb.btypes,
    _tb5.tbprocs,
    NULL,
    &Allocate_md.md,
    0, 
    '0', '1',
    sizeof(Allocate__ResolveVarConflicts_1),
    &Allocate__LiveRangeListDesc_td.td
  }
};

static const struct {
  int length;
  void* pad;
  _Type btypes[2];
} Allocate__ResolveVarConflicts_0_tdb = {
  2, 
  NULL, 
  {
    &Data__InfoDesc_td.td, 
    &Allocate__ResolveVarConflicts_0_td.td
  }
};
static const struct {
  int length;
  void* pad;
  const void* tbprocs[1];
} _tb6 = {0, NULL, {
  NULL
}};
struct _TD Allocate__ResolveVarConflicts_0_td = {
  NULL,
  &Types__TypeDesc_td.td,
  {
    Allocate__ResolveVarConflicts_0_tdb.btypes,
    _tb6.tbprocs,
    NULL,
    &Allocate_md.md,
    1, 
    '0', '1',
    sizeof(Allocate__ResolveVarConflicts_0),
    &Allocate__ResolveVarConflicts_1_td.td
  }
};

/* local strings */
static const unsigned char _c36[] = ": ";
static const unsigned char _c35[] = ">=";
static const unsigned char _c34[] = "#reg : #regions";
static const unsigned char _c33[] = " registers per greg";
static const unsigned char _c32[] = " global regions";
static const unsigned char _c31[] = " registers allocated in ";
static const unsigned char _c30[] = "statistic of allocated integer registers:";
static const unsigned char _c29[] = "_top_vs = _local_reg.top_vs;";
static const unsigned char _c28[] = "#define _RESTORE_RVARS";
static const unsigned char _c27[] = "#undef _RESTORE_RVARS";
static const unsigned char _c26[] = "_local_reg.top_vs = _top_vs;";
static const unsigned char _c25[] = "_local_reg.";
static const unsigned char _c24[] = "#define _SAVE_RVARS";
static const unsigned char _c23[] = "#undef _SAVE_RVARS";
static const unsigned char _c22[] = "  } _local_reg;";
static const unsigned char _c21[] = "    char* top_vs;";
static const unsigned char _c20[] = "  struct {";
static const unsigned char _c19[] = "  _ExecutionContextDesc _local_context;";
static const unsigned char _c18[] = " = ";
static const unsigned char _c17[] = " \134";
static const unsigned char _c16[] = ", ";
static const unsigned char _c15[] = "  register ";
static const unsigned char _c14[] = "  ";
static const unsigned char _c13[] = "f";
static const unsigned char _c12[] = "h";
static const unsigned char _c11[] = "i";
static const unsigned char _c10[] = "__tag";
static const unsigned char _c9[] = "d";
static const unsigned char _c8[] = "$store";
static const unsigned char _c7[] = "$mem";
static const unsigned char _c6[] = "&";
static const unsigned char _c5[] = "_td.td";
static const unsigned char _c4[] = "_";
static const unsigned char _c3[] = "*";
static const unsigned char _c2[] = ")";
static const unsigned char _c1[] = "(";
static const unsigned char _c0[] = "";

