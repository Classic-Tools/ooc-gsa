/* file generated by oo2c -- do not edit */
#include "ParseStatm.h"
#include "Config.h"
#include "Error.h"
#include "ParseExpr.h"
#include "IntStr.h"
#include "Opcode.h"
#include "Scanner.h"
#include "StdPragmas.h"
#include "StdTypes.h"
#include "SymbolTable.h"

/* local definitions */
unsigned char ParseStatm__setAssignHints;
typedef struct ParseStatm__StatementSeq_WithGuardDesc* ParseStatm__StatementSeq_WithGuard;
typedef struct ParseStatm__StatementSeq_WithGuardDesc {
  struct ParseStatm__StatementSeq_WithGuardDesc* next;
  Data__Usable var;
  Data__Struct type;
} ParseStatm__StatementSeq_WithGuardDesc;

/* function prototypes */
unsigned char ParseStatm__AssignmentCompatible_CArrayAssignCompatible(Data__Struct tv, Data__Struct te, Attributes__Item *ParseStatm__AssignmentCompatible_expr, _Type ParseStatm__AssignmentCompatible_expr__tag);
void ParseStatm__AssignmentCompatible(Data__Region region, Data__Struct varType, Attributes__Item *expr, _Type expr__tag);
void ParseStatm__WritableVariable(Attributes__Item *x, _Type x__tag);
void ParseStatm__AddToExit(Data__Region region, Data__Addressable var);
Data__Usable ParseStatm__CorrectCondGate(Data__Region region, Data__Usable value);
Data__Gate ParseStatm__AssignToVar_FindGate(Data__Region merge, Data__Addressable var);
void ParseStatm__AssignToVar_ReplaceGateOperand(Data__Gate gate, Data__Region region, Data__Usable value);
void ParseStatm__AssignToVar_FixupLoopGate(Data__Region lmerge, Data__Gate gate);
void ParseStatm__AssignToVar_CreateUpdate(short int opcode, Data__Instruction *ParseStatm__AssignToVar_instr, Data__Region *ParseStatm__AssignToVar_region, Data__Object *ParseStatm__AssignToVar_dest, Attributes__Item *ParseStatm__AssignToVar_x, Data__Usable *ParseStatm__AssignToVar_source, Attributes__Item *ParseStatm__AssignToVar_y);
short int ParseStatm__AssignToVar_IsCondGate(Data__Usable u);
unsigned char ParseStatm__AssignToVar_Visible(Data__Usable a, Data__Usable b);
void ParseStatm__AssignToVar(Data__Region region, Data__Object dest, Attributes__Item *x, _Type x__tag);
void ParseStatm__AssignBoolean(Data__Region region, Data__Object dest, unsigned char value);
void ParseStatm__AssignToDesignator_AddUpdate(Data__Usable *dest, Data__Usable *val, Data__Region *ParseStatm__AssignToDesignator_region);
void ParseStatm__AssignToDesignator(Data__Region region, Attributes__Item *dest, _Type dest__tag, Attributes__Item *value, _Type value__tag);
void ParseStatm__CollectToMem_AddOperand(Data__Object localVar, Data__Instruction *ParseStatm__CollectToMem_instr);
void ParseStatm__CollectToMem(Data__Instruction instr);
void ParseStatm__ReclaimFromMem_AddResult(Data__Object localVar, Data__Instruction *ParseStatm__ReclaimFromMem_instr);
void ParseStatm__ReclaimFromMem(Data__Instruction instr);
unsigned char ParseStatm__ArrayCompatible(Data__Object formalPar, Attributes__Item *expr, _Type expr__tag);
void ParseStatm__CheckValueParam(Data__Region region, Data__Object formal, Attributes__Item *param, _Type param__tag);
void ParseStatm__CheckVariableParam(int id, Data__Object formal, Attributes__Item *param, _Type param__tag);
void ParseStatm__ProcedureCall_RedoAccess(Attributes__Item *x, _Type x__tag, Data__Instruction *copy, Data__Region *ParseStatm__ProcedureCall_region);
void ParseStatm__ProcedureCall_PredefCall_CheckConst(short int i, int min, int max, short int *ParseStatm__ProcedureCall_paramCount, Attributes__Item ParseStatm__ProcedureCall_params[64]);
void ParseStatm__ProcedureCall_PredefCall(int id, Attributes__Item *ParseStatm__ProcedureCall_proc, short int *ParseStatm__ProcedureCall_paramCount, Attributes__Item ParseStatm__ProcedureCall_params[64], Data__Region *ParseStatm__ProcedureCall_region, short int *ParseStatm__ProcedureCall_oldErrCount, int *ParseStatm__ProcedureCall_lastParamEnd);
void ParseStatm__ProcedureCall_PredefCodeGen_WriteToMem(Data__Instruction instr, Attributes__Item *ParseStatm__ProcedureCall_proc, Data__Region *ParseStatm__ProcedureCall_region);
void ParseStatm__ProcedureCall_PredefCodeGen_Instr(short int opc, signed char formResult, unsigned int flags, Data__Region *ParseStatm__ProcedureCall_region, Attributes__Item ParseStatm__ProcedureCall_params[64], Attributes__Item *ParseStatm__ProcedureCall_proc, Data__Instruction ParseStatm__ProcedureCall_copy[64], Attributes__Item *ParseStatm__ProcedureCall_result, _Type ParseStatm__ProcedureCall_result__tag);
void ParseStatm__ProcedureCall_PredefCodeGen(int id, Attributes__Item *ParseStatm__ProcedureCall_result, Attributes__Item ParseStatm__ProcedureCall_params[64], _Type ParseStatm__ProcedureCall_result__tag, Attributes__Item *ParseStatm__ProcedureCall_proc, Data__Region *ParseStatm__ProcedureCall_region, Data__Instruction ParseStatm__ProcedureCall_copy[64], Attributes__ExitInfo *ParseStatm__ProcedureCall_exitInfo, _Type ParseStatm__ProcedureCall_exitInfo__tag, unsigned char *ParseStatm__ProcedureCall_initialize, int *ParseStatm__ProcedureCall_poisonHeap, short int *ParseStatm__ProcedureCall_paramCount);
void ParseStatm__ProcedureCall_SetSideEffectFlags(Data__Object localVar, unsigned char set);
void ParseStatm__ProcedureCall_PassParameters_PassParameter_SetSymLoc(short int attr, Data__Instruction *ParseStatm__ProcedureCall_PassParameters_instr, Attributes__Item *ParseStatm__ProcedureCall_PassParameters_PassParameter_param, Data__Object *ParseStatm__ProcedureCall_PassParameters_PassParameter_formal);
void ParseStatm__ProcedureCall_PassParameters_PassParameter(Data__Object formal, Attributes__Item *param, _Type param__tag, Data__Instruction *ParseStatm__ProcedureCall_PassParameters_instr, Data__Region *ParseStatm__ProcedureCall_region);
void ParseStatm__ProcedureCall_PassParameters(Data__Instruction instr, Data__Object receiver, Attributes__Item *ParseStatm__ProcedureCall_receiverItem, Data__Region *ParseStatm__ProcedureCall_region, Attributes__Item *ParseStatm__ProcedureCall_proc, Attributes__Item ParseStatm__ProcedureCall_params[64], short int *ParseStatm__ProcedureCall_paramCount);
void ParseStatm__ProcedureCall_PassNonlocalReferences(Data__Instruction instr, Attributes__Item *ParseStatm__ProcedureCall_proc, Data__Region *ParseStatm__ProcedureCall_region);
unsigned char ParseStatm__ProcedureCall_RegisterSideEffects_WritesToMem(Data__Instruction exit, Data__Opnd *opnd);
Data__Location ParseStatm__ProcedureCall_RegisterSideEffects_OpndLoc(Attributes__Item *x, _Type x__tag);
void ParseStatm__ProcedureCall_RegisterSideEffects(Data__Instruction instr, Attributes__Item *ParseStatm__ProcedureCall_proc, Data__Region *ParseStatm__ProcedureCall_region, Attributes__Item *ParseStatm__ProcedureCall_result, Data__Object *ParseStatm__ProcedureCall_receiver, Attributes__Item *ParseStatm__ProcedureCall_receiverItem, short int *ParseStatm__ProcedureCall_i, Data__Object *ParseStatm__ProcedureCall_formal, Attributes__Item ParseStatm__ProcedureCall_params[64], Data__Instruction *ParseStatm__ProcedureCall_receiverCopy, Data__Instruction ParseStatm__ProcedureCall_copy[64]);
void ParseStatm__ProcedureCall_MarkSideEffectedVars_CheckParameter(Data__Object formal, Attributes__Item *param, _Type param__tag);
void ParseStatm__ProcedureCall_MarkSideEffectedVars_CheckIfAdr(Data__Usable value);
unsigned char ParseStatm__ProcedureCall_MarkSideEffectedVars_HasForwardDecl(Data__Object localDecl);
void ParseStatm__ProcedureCall_MarkSideEffectedVars(Data__Object receiver, Attributes__Item *ParseStatm__ProcedureCall_proc, Attributes__Item *ParseStatm__ProcedureCall_receiverItem, Attributes__Item ParseStatm__ProcedureCall_params[64], short int *ParseStatm__ProcedureCall_paramCount);
void ParseStatm__ProcedureCall(Data__Region region, const Attributes__Item *proc__ref, Attributes__Item *result, _Type result__tag, Attributes__ExitInfo *exitInfo, _Type exitInfo__tag, unsigned char statement);
void ParseStatm__CommitIfMerge(Data__Region merge);
void ParseStatm__Assertion(Data__Region region, Attributes__Item *cond, _Type cond__tag, Data__Const trap, int pos, Attributes__ExitInfo *exitInfo, _Type exitInfo__tag);
void ParseStatm__StatementSeq_Statement_IfStatement(Data__Region region, Attributes__ExitInfo *exitInfo, _Type exitInfo__tag);
void ParseStatm__StatementSeq_Statement_RepeatStatement_CommitRepeatMerge(Data__Region merge, Data__Region backEdge, Data__Region exitEdge, Data__Merge oldMerge, Attributes__ExitInfo *ParseStatm__StatementSeq_Statement_RepeatStatement_exitInfo);
void ParseStatm__StatementSeq_Statement_RepeatStatement(Data__Region region, Attributes__ExitInfo *exitInfo, _Type exitInfo__tag, signed char checkForSym, int stepConst, Scanner__ScanState *condScan, _Type condScan__tag, Data__Object controlVar, const Attributes__Item *endValue__ref);
void ParseStatm__StatementSeq_Statement_WhileStatement(Data__Region region, Attributes__ExitInfo *exitInfo, _Type exitInfo__tag);
void ParseStatm__StatementSeq_Statement_LoopStatement(Data__Region region, Attributes__ExitInfo *exitInfo, _Type exitInfo__tag);
void ParseStatm__StatementSeq_Statement_ForStatement(Data__Region region, Attributes__ExitInfo *exitInfo, _Type exitInfo__tag);
Data__Const ParseStatm__StatementSeq_Statement_CaseStatement_CaseLabels_Boundary(int *pos, signed char *ParseStatm__StatementSeq_Statement_CaseStatement_CaseLabels_expectedType, Attributes__Item *ParseStatm__StatementSeq_Statement_CaseStatement_x);
void ParseStatm__StatementSeq_Statement_CaseStatement_CaseLabels(Data__Guard guard, Data__Guard else_, signed char expectedType, Attributes__Item *ParseStatm__StatementSeq_Statement_CaseStatement_x, Data__Merge *ParseStatm__StatementSeq_merge);
Data__Guard ParseStatm__StatementSeq_Statement_CaseStatement_AddGuard(Data__Merge merge, Attributes__Item *ParseStatm__StatementSeq_Statement_CaseStatement_x, Data__Region *ParseStatm__StatementSeq_Statement_CaseStatement_region);
void ParseStatm__StatementSeq_Statement_CaseStatement(Data__Region region, Attributes__ExitInfo *exitInfo, _Type exitInfo__tag, Data__Merge *ParseStatm__StatementSeq_merge);
void ParseStatm__StatementSeq_Statement_WithStatement_Guard(Attributes__Item *cond, _Type cond__tag, Data__Region *ParseStatm__StatementSeq_Statement_WithStatement_region, Attributes__Item *ParseStatm__StatementSeq_Statement_WithStatement_var, unsigned char *ParseStatm__StatementSeq_Statement_WithStatement_ok, Attributes__Item *ParseStatm__StatementSeq_Statement_WithStatement_type, struct ParseStatm__StatementSeq_WithGuardDesc* *ParseStatm__StatementSeq_Statement_WithStatement_guard, struct ParseStatm__StatementSeq_WithGuardDesc* *ParseStatm__StatementSeq_Statement_WithStatement_guardList, struct ParseStatm__StatementSeq_WithGuardDesc* *ParseStatm__StatementSeq_Statement_WithStatement_newGuard);
void ParseStatm__StatementSeq_Statement_WithStatement(Data__Region region, struct ParseStatm__StatementSeq_WithGuardDesc* guardList, Attributes__ExitInfo *exitInfo, _Type exitInfo__tag);
Data__Usable ParseStatm__StatementSeq_Statement_TypeAssertion(Attributes__Item *var, _Type var__tag, Data__Region *ParseStatm__StatementSeq_Statement_region, Attributes__Item *ParseStatm__StatementSeq_Statement_x);
void ParseStatm__StatementSeq_Statement_StructCopy(Data__Region region, Data__Usable currValue, Attributes__Item *x, _Type x__tag, Attributes__Item *y, _Type y__tag);
void ParseStatm__StatementSeq_Statement_DisabledAssert(Data__Region region, const Attributes__Item *proc__ref, Attributes__Item *result, _Type result__tag, Attributes__ExitInfo *exitInfo, _Type exitInfo__tag, Attributes__Item *ParseStatm__StatementSeq_Statement_x);
void ParseStatm__StatementSeq_Statement(Data__Region region, Attributes__ExitInfo *exitInfo, _Type exitInfo__tag, Data__Merge *ParseStatm__StatementSeq_merge, Attributes__Item *ParseStatm__StatementSeq_cond);
unsigned char ParseStatm__StatementSeq_StatementSep(short int sym);

/* module and type descriptors */
static const struct {
  int length;
  void* pad;
  const char name[11];
} _n0 = {11, NULL, {"ParseStatm"}};
static struct _MD ParseStatm_md = {
  NULL, 
  &Kernel__ModuleDesc_td.td, 
  {
    NULL, 
    (const unsigned char*)_n0.name, 
    -1, 
    NULL
  }
};

static const struct {
  int length;
  void* pad;
  _Type btypes[1];
} ParseStatm__StatementSeq_WithGuardDesc_tdb = {
  1, 
  NULL, 
  {
    &ParseStatm__StatementSeq_WithGuardDesc_td.td
  }
};
static const struct {
  int length;
  void* pad;
  const void* tbprocs[1];
} _tb0 = {0, NULL, {
  NULL
}};
struct _TD ParseStatm__StatementSeq_WithGuardDesc_td = {
  NULL,
  &Types__TypeDesc_td.td,
  {
    ParseStatm__StatementSeq_WithGuardDesc_tdb.btypes,
    _tb0.tbprocs,
    NULL,
    &ParseStatm_md.md,
    0, 
    '0', '1',
    sizeof(ParseStatm__StatementSeq_WithGuardDesc),
    NULL
  }
};

/* local strings */
static const unsigned char _c2[] = "$exit";
static const unsigned char _c1[] = "$len";
static const unsigned char _c0[] = "$result";

