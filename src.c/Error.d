/* file generated by oo2c -- do not edit */
#include "Error.h"
#include "BinaryRider.h"
#include "Config.h"
#include "Filenames.h"
#include "Files.h"
#include "IntStr.h"
#include "Out.h"
#include "ParamPragmas.h"
#include "StdPragmas.h"
#include "Strings.h"

/* local definitions */
typedef struct Error__ErrMsgDesc {
  struct Error__ErrMsgDesc* next;
  short int num;
  char _6pad, _7pad;
  Parameter__String source;
  int pos;
  int suppressed;
  Parameter__String msg;
} Error__ErrMsgDesc;
typedef struct Error__ErrMsgDesc* Error__ErrMsg;
unsigned char Error__noerr;
short int Error__errCount;
ParamOptions__BooleanOption Error__verbose;
ParamOptions__StringOption Error__errorMsgs;
Parameter__String Error__sourceFile;
static Error__ErrMsg Error__errList;
static Error__ErrMsg Error__errDescrList;
static unsigned char Error__errListRead;

/* function prototypes */
void Error__ReadErrorList_SkipWhitespace(BinaryRider__Reader *Error__ReadErrorList_r, unsigned char *Error__ReadErrorList_ch);
void Error__ReadErrorList_Err(unsigned char* Error__ReadErrorList_fileName, int Error__ReadErrorList_fileName_0d, short int *Error__ReadErrorList_line);
void Error__ReadErrorList(const unsigned char* fileName__ref, int fileName_0d);
void Error__GetErrMsg(short int num, unsigned char* str, int str_0d);
void Error__Replace(unsigned char* string, int string_0d, unsigned char* insert, int insert_0d);
Error__ErrMsg Error__StoreError_NewErrMsg(Error__ErrMsg next, short int *Error__StoreError_num, Parameter__String *Error__StoreError_source, int *Error__StoreError_pos, unsigned char* Error__StoreError_msg, int Error__StoreError_msg_0d);
void Error__StoreError_Insert(Error__ErrMsg *list, Error__ErrMsg lastErr, short int *Error__StoreError_num, Parameter__String *Error__StoreError_source, int *Error__StoreError_pos, unsigned char* Error__StoreError_msg, int Error__StoreError_msg_0d);
void Error__StoreError(Parameter__String source, int pos, short int num, const unsigned char* msg__ref, int msg_0d);
void Error__EmitErrors_WriteError(Parameter__String source, int pos, short int num, const unsigned char* msg__ref, int msg_0d, Parameter__String *Error__EmitErrors_lastSource);

/* module and type descriptors */
static const struct {
  int length;
  void* pad;
  const char name[6];
} _n0 = {6, NULL, {"Error"}};
static struct _MD Error_md = {
  NULL, 
  &Kernel__ModuleDesc_td.td, 
  {
    NULL, 
    (const unsigned char*)_n0.name, 
    -1, 
    NULL
  }
};

static const struct {
  int length;
  void* pad;
  const char name[11];
} _n1 = {11, NULL, {"ErrMsgDesc"}};
static const struct {
  int length;
  void* pad;
  _Type btypes[1];
} Error__ErrMsgDesc_tdb = {
  1, 
  NULL, 
  {
    &Error__ErrMsgDesc_td.td
  }
};
static const struct {
  int length;
  void* pad;
  const void* tbprocs[1];
} _tb0 = {0, NULL, {
  NULL
}};
struct _TD Error__ErrMsgDesc_td = {
  NULL,
  &Types__TypeDesc_td.td,
  {
    Error__ErrMsgDesc_tdb.btypes,
    _tb0.tbprocs,
    (const unsigned char*)_n1.name,
    &Error_md.md,
    0, 
    '0', '1',
    sizeof(Error__ErrMsgDesc),
    NULL
  }
};

/* local strings */
static const unsigned char _c19[] = "backend/ansi-c/doc/Errors.short";
static const unsigned char _c18[] = "errorMessages";
static const unsigned char _c17[] = "Warnings:=TRUE";
static const unsigned char _c16[] = "-w,--warnings";
static const unsigned char _c15[] = "verbose:=TRUE";
static const unsigned char _c14[] = "-v,--verbose";
static const unsigned char _c13[] = "verbose";
static const unsigned char _c12[] = "       ";
static const unsigned char _c11[] = "Error: ";
static const unsigned char _c10[] = "%";
static const unsigned char _c9[] = "y";
static const unsigned char _c8[] = " <= x < ";
static const unsigned char _c7[] = "";
static const unsigned char _c6[] = ":";
static const unsigned char _c5[] = ": ";
static const unsigned char _c4[] = "In file ";
static const unsigned char _c3[] = "(no error message available)";
static const unsigned char _c2[] = "Couldn\047t read error messages from file ";
static const unsigned char _c1[] = ", line ";
static const unsigned char _c0[] = "Parse error in ";

