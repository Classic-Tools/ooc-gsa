/* file generated by oo2c -- do not edit */
#include "ControlFlow.h"
#include "Allocate.h"
#include "Classify.h"
#include "Opcode.h"

/* local definitions */

/* function prototypes */
Data__Instruction ControlFlow__CreateInstr(Data__Region region, short int opcode, unsigned char atBeginning);
void ControlFlow__SetTarget(Data__Instruction instr, Data__Instruction target);
void ControlFlow__DisableInstr(Data__Instruction instr);
unsigned char ControlFlow__NoOutput(Data__Instruction instr);
unsigned char ControlFlow__PlaceInstructions_AssignsToGates(Data__Region r, Data__Region merge);
void ControlFlow__PlaceInstructions(Data__Region r);
Data__Instruction ControlFlow__SetTargets_JumpTarget(Data__Region region);
unsigned char ControlFlow__SetTargets_BranchTarget_ComplementaryGuards(Data__Instruction i0_, Data__Instruction i1_);
Data__Instruction ControlFlow__SetTargets_BranchTarget(Data__Guard guard);
void ControlFlow__SetTargets(Data__Region r);
void ControlFlow__InitRegionMarkers(Data__Region r);
void ControlFlow__MoveMerges(Data__Region r, unsigned char force);
Data__Instruction ControlFlow__NextInstr(Data__Instruction instr);
void ControlFlow__JumpChaining_Chain(Data__Instruction instr);
void ControlFlow__JumpChaining(Data__Region r);
void ControlFlow__RemoveUnreachable(Data__Region r);
void ControlFlow__OptimizeBranches(Data__Region r);
void ControlFlow__GlobalRegion_MarkTargets(Data__Region r, int *ControlFlow__GlobalRegion_countLabel);

/* module and type descriptors */
static const struct {
  int length;
  void* pad;
  const void* list[1];
} _p0 = {1, NULL, {
  (const void*)&ControlFlow__GlobalRegion,
}};
static const struct {
  int length;
  void* pad;
  const void* list[0];
} _p1 = {0, NULL, {
}};
static const struct {
  int length;
  void* pad;
  const char name[12];
} _n0 = {12, NULL, {"ControlFlow"}};
static struct _MD ControlFlow_md = {
  NULL, 
  &Kernel__ModuleDesc_td.td, 
  {
    NULL, 
    (const unsigned char*)_n0.name, 
    -1, 
    NULL,
    _p0.list,
    _p1.list,
    387450673
  }
};

/* local strings */

